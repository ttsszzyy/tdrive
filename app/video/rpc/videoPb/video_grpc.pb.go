// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: app/video/rpc/videoProto/video.proto

package videoPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Video_CreateVideo_FullMethodName     = "/pb.video/CreateVideo"
	Video_UpdateVideo_FullMethodName     = "/pb.video/UpdateVideo"
	Video_DeleteVideo_FullMethodName     = "/pb.video/DeleteVideo"
	Video_GetVideoList_FullMethodName    = "/pb.video/GetVideoList"
	Video_CreateLabel_FullMethodName     = "/pb.video/CreateLabel"
	Video_GetLabelList_FullMethodName    = "/pb.video/GetLabelList"
	Video_GetOneLabel_FullMethodName     = "/pb.video/GetOneLabel"
	Video_SaveLabelUser_FullMethodName   = "/pb.video/SaveLabelUser"
	Video_GetLabelUser_FullMethodName    = "/pb.video/GetLabelUser"
	Video_GetOneLabelUser_FullMethodName = "/pb.video/GetOneLabelUser"
	Video_CountLabelUser_FullMethodName  = "/pb.video/CountLabelUser"
	Video_CreateComment_FullMethodName   = "/pb.video/CreateComment"
	Video_GetCommentList_FullMethodName  = "/pb.video/GetCommentList"
	Video_CreateReply_FullMethodName     = "/pb.video/CreateReply"
	Video_GetReplyList_FullMethodName    = "/pb.video/GetReplyList"
)

// VideoClient is the client API for Video service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoClient interface {
	// 视频
	CreateVideo(ctx context.Context, in *CreateVideoReq, opts ...grpc.CallOption) (*CreateVideoResp, error)
	UpdateVideo(ctx context.Context, in *UpdateVideoReq, opts ...grpc.CallOption) (*VideoResponse, error)
	DeleteVideo(ctx context.Context, in *DeleteVideoReq, opts ...grpc.CallOption) (*VideoResponse, error)
	GetVideoList(ctx context.Context, in *GetVideoListReq, opts ...grpc.CallOption) (*GetVideoListResp, error)
	// 标签
	CreateLabel(ctx context.Context, in *CreateLabelReq, opts ...grpc.CallOption) (*CreateLabelResp, error)
	GetLabelList(ctx context.Context, in *GetLabelListReq, opts ...grpc.CallOption) (*GetLabelListResp, error)
	GetOneLabel(ctx context.Context, in *GetOneLabelReq, opts ...grpc.CallOption) (*VideosLabel, error)
	// 标签点赞
	SaveLabelUser(ctx context.Context, in *SaveLabelUserReq, opts ...grpc.CallOption) (*SaveLabelUserResp, error)
	GetLabelUser(ctx context.Context, in *GetLabelUserReq, opts ...grpc.CallOption) (*GetLabelUserResp, error)
	GetOneLabelUser(ctx context.Context, in *GetOneLabelUserReq, opts ...grpc.CallOption) (*VideosLabelUser, error)
	CountLabelUser(ctx context.Context, in *CountLabelUserReq, opts ...grpc.CallOption) (*CountLabelUserResp, error)
	// 评论
	CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*VideoResponse, error)
	GetCommentList(ctx context.Context, in *GetCommentListReq, opts ...grpc.CallOption) (*GetCommentListResp, error)
	// 回复评论
	CreateReply(ctx context.Context, in *CreateReplyReq, opts ...grpc.CallOption) (*CreateReplyResp, error)
	GetReplyList(ctx context.Context, in *GetReplyListReq, opts ...grpc.CallOption) (*GetReplyListResp, error)
}

type videoClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoClient(cc grpc.ClientConnInterface) VideoClient {
	return &videoClient{cc}
}

func (c *videoClient) CreateVideo(ctx context.Context, in *CreateVideoReq, opts ...grpc.CallOption) (*CreateVideoResp, error) {
	out := new(CreateVideoResp)
	err := c.cc.Invoke(ctx, Video_CreateVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) UpdateVideo(ctx context.Context, in *UpdateVideoReq, opts ...grpc.CallOption) (*VideoResponse, error) {
	out := new(VideoResponse)
	err := c.cc.Invoke(ctx, Video_UpdateVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) DeleteVideo(ctx context.Context, in *DeleteVideoReq, opts ...grpc.CallOption) (*VideoResponse, error) {
	out := new(VideoResponse)
	err := c.cc.Invoke(ctx, Video_DeleteVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetVideoList(ctx context.Context, in *GetVideoListReq, opts ...grpc.CallOption) (*GetVideoListResp, error) {
	out := new(GetVideoListResp)
	err := c.cc.Invoke(ctx, Video_GetVideoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) CreateLabel(ctx context.Context, in *CreateLabelReq, opts ...grpc.CallOption) (*CreateLabelResp, error) {
	out := new(CreateLabelResp)
	err := c.cc.Invoke(ctx, Video_CreateLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetLabelList(ctx context.Context, in *GetLabelListReq, opts ...grpc.CallOption) (*GetLabelListResp, error) {
	out := new(GetLabelListResp)
	err := c.cc.Invoke(ctx, Video_GetLabelList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetOneLabel(ctx context.Context, in *GetOneLabelReq, opts ...grpc.CallOption) (*VideosLabel, error) {
	out := new(VideosLabel)
	err := c.cc.Invoke(ctx, Video_GetOneLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) SaveLabelUser(ctx context.Context, in *SaveLabelUserReq, opts ...grpc.CallOption) (*SaveLabelUserResp, error) {
	out := new(SaveLabelUserResp)
	err := c.cc.Invoke(ctx, Video_SaveLabelUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetLabelUser(ctx context.Context, in *GetLabelUserReq, opts ...grpc.CallOption) (*GetLabelUserResp, error) {
	out := new(GetLabelUserResp)
	err := c.cc.Invoke(ctx, Video_GetLabelUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetOneLabelUser(ctx context.Context, in *GetOneLabelUserReq, opts ...grpc.CallOption) (*VideosLabelUser, error) {
	out := new(VideosLabelUser)
	err := c.cc.Invoke(ctx, Video_GetOneLabelUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) CountLabelUser(ctx context.Context, in *CountLabelUserReq, opts ...grpc.CallOption) (*CountLabelUserResp, error) {
	out := new(CountLabelUserResp)
	err := c.cc.Invoke(ctx, Video_CountLabelUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*VideoResponse, error) {
	out := new(VideoResponse)
	err := c.cc.Invoke(ctx, Video_CreateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetCommentList(ctx context.Context, in *GetCommentListReq, opts ...grpc.CallOption) (*GetCommentListResp, error) {
	out := new(GetCommentListResp)
	err := c.cc.Invoke(ctx, Video_GetCommentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) CreateReply(ctx context.Context, in *CreateReplyReq, opts ...grpc.CallOption) (*CreateReplyResp, error) {
	out := new(CreateReplyResp)
	err := c.cc.Invoke(ctx, Video_CreateReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoClient) GetReplyList(ctx context.Context, in *GetReplyListReq, opts ...grpc.CallOption) (*GetReplyListResp, error) {
	out := new(GetReplyListResp)
	err := c.cc.Invoke(ctx, Video_GetReplyList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoServer is the server API for Video service.
// All implementations must embed UnimplementedVideoServer
// for forward compatibility
type VideoServer interface {
	// 视频
	CreateVideo(context.Context, *CreateVideoReq) (*CreateVideoResp, error)
	UpdateVideo(context.Context, *UpdateVideoReq) (*VideoResponse, error)
	DeleteVideo(context.Context, *DeleteVideoReq) (*VideoResponse, error)
	GetVideoList(context.Context, *GetVideoListReq) (*GetVideoListResp, error)
	// 标签
	CreateLabel(context.Context, *CreateLabelReq) (*CreateLabelResp, error)
	GetLabelList(context.Context, *GetLabelListReq) (*GetLabelListResp, error)
	GetOneLabel(context.Context, *GetOneLabelReq) (*VideosLabel, error)
	// 标签点赞
	SaveLabelUser(context.Context, *SaveLabelUserReq) (*SaveLabelUserResp, error)
	GetLabelUser(context.Context, *GetLabelUserReq) (*GetLabelUserResp, error)
	GetOneLabelUser(context.Context, *GetOneLabelUserReq) (*VideosLabelUser, error)
	CountLabelUser(context.Context, *CountLabelUserReq) (*CountLabelUserResp, error)
	// 评论
	CreateComment(context.Context, *CreateCommentReq) (*VideoResponse, error)
	GetCommentList(context.Context, *GetCommentListReq) (*GetCommentListResp, error)
	// 回复评论
	CreateReply(context.Context, *CreateReplyReq) (*CreateReplyResp, error)
	GetReplyList(context.Context, *GetReplyListReq) (*GetReplyListResp, error)
	mustEmbedUnimplementedVideoServer()
}

// UnimplementedVideoServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServer struct {
}

func (UnimplementedVideoServer) CreateVideo(context.Context, *CreateVideoReq) (*CreateVideoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVideo not implemented")
}
func (UnimplementedVideoServer) UpdateVideo(context.Context, *UpdateVideoReq) (*VideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVideo not implemented")
}
func (UnimplementedVideoServer) DeleteVideo(context.Context, *DeleteVideoReq) (*VideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideo not implemented")
}
func (UnimplementedVideoServer) GetVideoList(context.Context, *GetVideoListReq) (*GetVideoListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoList not implemented")
}
func (UnimplementedVideoServer) CreateLabel(context.Context, *CreateLabelReq) (*CreateLabelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLabel not implemented")
}
func (UnimplementedVideoServer) GetLabelList(context.Context, *GetLabelListReq) (*GetLabelListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelList not implemented")
}
func (UnimplementedVideoServer) GetOneLabel(context.Context, *GetOneLabelReq) (*VideosLabel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneLabel not implemented")
}
func (UnimplementedVideoServer) SaveLabelUser(context.Context, *SaveLabelUserReq) (*SaveLabelUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLabelUser not implemented")
}
func (UnimplementedVideoServer) GetLabelUser(context.Context, *GetLabelUserReq) (*GetLabelUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelUser not implemented")
}
func (UnimplementedVideoServer) GetOneLabelUser(context.Context, *GetOneLabelUserReq) (*VideosLabelUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneLabelUser not implemented")
}
func (UnimplementedVideoServer) CountLabelUser(context.Context, *CountLabelUserReq) (*CountLabelUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountLabelUser not implemented")
}
func (UnimplementedVideoServer) CreateComment(context.Context, *CreateCommentReq) (*VideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedVideoServer) GetCommentList(context.Context, *GetCommentListReq) (*GetCommentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentList not implemented")
}
func (UnimplementedVideoServer) CreateReply(context.Context, *CreateReplyReq) (*CreateReplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReply not implemented")
}
func (UnimplementedVideoServer) GetReplyList(context.Context, *GetReplyListReq) (*GetReplyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplyList not implemented")
}
func (UnimplementedVideoServer) mustEmbedUnimplementedVideoServer() {}

// UnsafeVideoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServer will
// result in compilation errors.
type UnsafeVideoServer interface {
	mustEmbedUnimplementedVideoServer()
}

func RegisterVideoServer(s grpc.ServiceRegistrar, srv VideoServer) {
	s.RegisterService(&Video_ServiceDesc, srv)
}

func _Video_CreateVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).CreateVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_CreateVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).CreateVideo(ctx, req.(*CreateVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_UpdateVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).UpdateVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_UpdateVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).UpdateVideo(ctx, req.(*UpdateVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_DeleteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).DeleteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_DeleteVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).DeleteVideo(ctx, req.(*DeleteVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetVideoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetVideoList(ctx, req.(*GetVideoListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_CreateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).CreateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_CreateLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).CreateLabel(ctx, req.(*CreateLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetLabelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetLabelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetLabelList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetLabelList(ctx, req.(*GetLabelListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetOneLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetOneLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetOneLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetOneLabel(ctx, req.(*GetOneLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_SaveLabelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveLabelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).SaveLabelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_SaveLabelUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).SaveLabelUser(ctx, req.(*SaveLabelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetLabelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetLabelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetLabelUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetLabelUser(ctx, req.(*GetLabelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetOneLabelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneLabelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetOneLabelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetOneLabelUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetOneLabelUser(ctx, req.(*GetOneLabelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_CountLabelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountLabelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).CountLabelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_CountLabelUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).CountLabelUser(ctx, req.(*CountLabelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).CreateComment(ctx, req.(*CreateCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetCommentList(ctx, req.(*GetCommentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_CreateReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).CreateReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_CreateReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).CreateReply(ctx, req.(*CreateReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Video_GetReplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServer).GetReplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Video_GetReplyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServer).GetReplyList(ctx, req.(*GetReplyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Video_ServiceDesc is the grpc.ServiceDesc for Video service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Video_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.video",
	HandlerType: (*VideoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVideo",
			Handler:    _Video_CreateVideo_Handler,
		},
		{
			MethodName: "UpdateVideo",
			Handler:    _Video_UpdateVideo_Handler,
		},
		{
			MethodName: "DeleteVideo",
			Handler:    _Video_DeleteVideo_Handler,
		},
		{
			MethodName: "GetVideoList",
			Handler:    _Video_GetVideoList_Handler,
		},
		{
			MethodName: "CreateLabel",
			Handler:    _Video_CreateLabel_Handler,
		},
		{
			MethodName: "GetLabelList",
			Handler:    _Video_GetLabelList_Handler,
		},
		{
			MethodName: "GetOneLabel",
			Handler:    _Video_GetOneLabel_Handler,
		},
		{
			MethodName: "SaveLabelUser",
			Handler:    _Video_SaveLabelUser_Handler,
		},
		{
			MethodName: "GetLabelUser",
			Handler:    _Video_GetLabelUser_Handler,
		},
		{
			MethodName: "GetOneLabelUser",
			Handler:    _Video_GetOneLabelUser_Handler,
		},
		{
			MethodName: "CountLabelUser",
			Handler:    _Video_CountLabelUser_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _Video_CreateComment_Handler,
		},
		{
			MethodName: "GetCommentList",
			Handler:    _Video_GetCommentList_Handler,
		},
		{
			MethodName: "CreateReply",
			Handler:    _Video_CreateReply_Handler,
		},
		{
			MethodName: "GetReplyList",
			Handler:    _Video_GetReplyList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/video/rpc/videoProto/video.proto",
}
