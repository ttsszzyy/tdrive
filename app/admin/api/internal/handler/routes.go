// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	admin "T-driver/app/admin/api/internal/handler/admin"
	auth "T-driver/app/admin/api/internal/handler/auth"
	document "T-driver/app/admin/api/internal/handler/document"
	parameter "T-driver/app/admin/api/internal/handler/parameter"
	taskPool "T-driver/app/admin/api/internal/handler/taskPool"
	user "T-driver/app/admin/api/internal/handler/user"
	video "T-driver/app/admin/api/internal/handler/video"
	"T-driver/app/admin/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/adminLogin",
				Handler: auth.AdminLoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/admin/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AdminAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addAdmin",
					Handler: admin.AddAdminHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/updateAdmin",
					Handler: admin.UpdateAdminHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/updateAdminPass",
					Handler: admin.UpdateAdminPassHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/delAdmin",
					Handler: admin.DelAdminHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryAdminList",
					Handler: admin.QueryAdminListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AdminAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPut,
					Path:    "/updateUser",
					Handler: user.UpdateUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryUser",
					Handler: user.QueryUserHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/admin-api/v1/user"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AdminAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/addTaskPool",
					Handler: taskPool.AddTaskPoolHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/updateTaskPool",
					Handler: taskPool.UpdateTaskPoolHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/deleteTaskPool",
					Handler: taskPool.DeleteTaskPoolHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryTaskPool",
					Handler: taskPool.QueryTaskPoolHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/taskPool"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AdminAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPut,
					Path:    "/updateParameter",
					Handler: parameter.UpdateParameterHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/queryParameter",
					Handler: parameter.QueryParameterHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/sendPhoto",
					Handler: parameter.SendPhotoHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/delBotPin",
					Handler: parameter.DelBotPinHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/delAllBotPin",
					Handler: parameter.DelAllBotPinHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/botPinList",
					Handler: parameter.BotPinListHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/delBotCommand",
					Handler: parameter.DelBotCommandHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/addBotCommand",
					Handler: parameter.AddBotCommandHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/botCommandList",
					Handler: parameter.BotCommandListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/parameter"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AdminAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/queryFile",
					Handler: document.QueryFileHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/delFile",
					Handler: document.DelFileHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/banFile",
					Handler: document.BanFileHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/cancelFile",
					Handler: document.CancelFileHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/download",
					Handler: document.DownloadHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/document"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AdminAuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/videoList",
					Handler: video.VideoListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/videoUpload",
					Handler: video.VideoUploadHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/videoDelete",
					Handler: video.VideoDeleteHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/admin/video"),
	)
}
