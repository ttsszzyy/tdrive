// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: app/tgbot/rpc/proto/tgbot.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Tgbot_SendBotMsg_FullMethodName     = "/pb.tgbot/SendBotMsg"
	Tgbot_SendPhoto_FullMethodName      = "/pb.tgbot/SendPhoto"
	Tgbot_DelPinMsg_FullMethodName      = "/pb.tgbot/DelPinMsg"
	Tgbot_DelAllPinMsg_FullMethodName   = "/pb.tgbot/DelAllPinMsg"
	Tgbot_SendBotCommand_FullMethodName = "/pb.tgbot/SendBotCommand"
)

// TgbotClient is the client API for Tgbot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TgbotClient interface {
	// 文本发送
	SendBotMsg(ctx context.Context, in *SendBotMsgRequest, opts ...grpc.CallOption) (*SendBotMsgResponse, error)
	// 发送pin消息
	SendPhoto(ctx context.Context, in *SendPhotoRequest, opts ...grpc.CallOption) (*SendBotMsgResponse, error)
	DelPinMsg(ctx context.Context, in *DelPinMsgReq, opts ...grpc.CallOption) (*DelPinMsgResp, error)
	DelAllPinMsg(ctx context.Context, in *DelAllPinMsgReq, opts ...grpc.CallOption) (*DelPinMsgResp, error)
	SendBotCommand(ctx context.Context, in *SendBotCommandReq, opts ...grpc.CallOption) (*DelPinMsgResp, error)
}

type tgbotClient struct {
	cc grpc.ClientConnInterface
}

func NewTgbotClient(cc grpc.ClientConnInterface) TgbotClient {
	return &tgbotClient{cc}
}

func (c *tgbotClient) SendBotMsg(ctx context.Context, in *SendBotMsgRequest, opts ...grpc.CallOption) (*SendBotMsgResponse, error) {
	out := new(SendBotMsgResponse)
	err := c.cc.Invoke(ctx, Tgbot_SendBotMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tgbotClient) SendPhoto(ctx context.Context, in *SendPhotoRequest, opts ...grpc.CallOption) (*SendBotMsgResponse, error) {
	out := new(SendBotMsgResponse)
	err := c.cc.Invoke(ctx, Tgbot_SendPhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tgbotClient) DelPinMsg(ctx context.Context, in *DelPinMsgReq, opts ...grpc.CallOption) (*DelPinMsgResp, error) {
	out := new(DelPinMsgResp)
	err := c.cc.Invoke(ctx, Tgbot_DelPinMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tgbotClient) DelAllPinMsg(ctx context.Context, in *DelAllPinMsgReq, opts ...grpc.CallOption) (*DelPinMsgResp, error) {
	out := new(DelPinMsgResp)
	err := c.cc.Invoke(ctx, Tgbot_DelAllPinMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tgbotClient) SendBotCommand(ctx context.Context, in *SendBotCommandReq, opts ...grpc.CallOption) (*DelPinMsgResp, error) {
	out := new(DelPinMsgResp)
	err := c.cc.Invoke(ctx, Tgbot_SendBotCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TgbotServer is the server API for Tgbot service.
// All implementations must embed UnimplementedTgbotServer
// for forward compatibility
type TgbotServer interface {
	// 文本发送
	SendBotMsg(context.Context, *SendBotMsgRequest) (*SendBotMsgResponse, error)
	// 发送pin消息
	SendPhoto(context.Context, *SendPhotoRequest) (*SendBotMsgResponse, error)
	DelPinMsg(context.Context, *DelPinMsgReq) (*DelPinMsgResp, error)
	DelAllPinMsg(context.Context, *DelAllPinMsgReq) (*DelPinMsgResp, error)
	SendBotCommand(context.Context, *SendBotCommandReq) (*DelPinMsgResp, error)
	mustEmbedUnimplementedTgbotServer()
}

// UnimplementedTgbotServer must be embedded to have forward compatible implementations.
type UnimplementedTgbotServer struct {
}

func (UnimplementedTgbotServer) SendBotMsg(context.Context, *SendBotMsgRequest) (*SendBotMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBotMsg not implemented")
}
func (UnimplementedTgbotServer) SendPhoto(context.Context, *SendPhotoRequest) (*SendBotMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPhoto not implemented")
}
func (UnimplementedTgbotServer) DelPinMsg(context.Context, *DelPinMsgReq) (*DelPinMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPinMsg not implemented")
}
func (UnimplementedTgbotServer) DelAllPinMsg(context.Context, *DelAllPinMsgReq) (*DelPinMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAllPinMsg not implemented")
}
func (UnimplementedTgbotServer) SendBotCommand(context.Context, *SendBotCommandReq) (*DelPinMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBotCommand not implemented")
}
func (UnimplementedTgbotServer) mustEmbedUnimplementedTgbotServer() {}

// UnsafeTgbotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TgbotServer will
// result in compilation errors.
type UnsafeTgbotServer interface {
	mustEmbedUnimplementedTgbotServer()
}

func RegisterTgbotServer(s grpc.ServiceRegistrar, srv TgbotServer) {
	s.RegisterService(&Tgbot_ServiceDesc, srv)
}

func _Tgbot_SendBotMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBotMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TgbotServer).SendBotMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tgbot_SendBotMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TgbotServer).SendBotMsg(ctx, req.(*SendBotMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tgbot_SendPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TgbotServer).SendPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tgbot_SendPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TgbotServer).SendPhoto(ctx, req.(*SendPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tgbot_DelPinMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPinMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TgbotServer).DelPinMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tgbot_DelPinMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TgbotServer).DelPinMsg(ctx, req.(*DelPinMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tgbot_DelAllPinMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAllPinMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TgbotServer).DelAllPinMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tgbot_DelAllPinMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TgbotServer).DelAllPinMsg(ctx, req.(*DelAllPinMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tgbot_SendBotCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBotCommandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TgbotServer).SendBotCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tgbot_SendBotCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TgbotServer).SendBotCommand(ctx, req.(*SendBotCommandReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Tgbot_ServiceDesc is the grpc.ServiceDesc for Tgbot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tgbot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.tgbot",
	HandlerType: (*TgbotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendBotMsg",
			Handler:    _Tgbot_SendBotMsg_Handler,
		},
		{
			MethodName: "SendPhoto",
			Handler:    _Tgbot_SendPhoto_Handler,
		},
		{
			MethodName: "DelPinMsg",
			Handler:    _Tgbot_DelPinMsg_Handler,
		},
		{
			MethodName: "DelAllPinMsg",
			Handler:    _Tgbot_DelAllPinMsg_Handler,
		},
		{
			MethodName: "SendBotCommand",
			Handler:    _Tgbot_SendBotCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/tgbot/rpc/proto/tgbot.proto",
}
