// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	document "T-driver/app/user/api/internal/handler/document"
	message "T-driver/app/user/api/internal/handler/message"
	share "T-driver/app/user/api/internal/handler/share"
	task "T-driver/app/user/api/internal/handler/task"
	trade "T-driver/app/user/api/internal/handler/trade"
	transmission "T-driver/app/user/api/internal/handler/transmission"
	user "T-driver/app/user/api/internal/handler/user"
	"T-driver/app/user/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// ids查询资源列表
					Method:  http.MethodPost,
					Path:    "/assetIds",
					Handler: document.AssetIdsHandler(serverCtx),
				},
				{
					// 资源详情
					Method:  http.MethodGet,
					Path:    "/assetsInfo",
					Handler: document.AssetsInfoHandler(serverCtx),
				},
				{
					// 校验回收站
					Method:  http.MethodGet,
					Path:    "/checkRecycle",
					Handler: document.CheckRecycleHandler(serverCtx),
				},
				{
					// 清空回收站
					Method:  http.MethodDelete,
					Path:    "/clear",
					Handler: document.ClearHandler(serverCtx),
				},
				{
					// 云下载
					Method:  http.MethodPost,
					Path:    "/cloudDownload",
					Handler: document.CloudDownloadHandler(serverCtx),
				},
				{
					// 链接上传文件
					Method:  http.MethodPost,
					Path:    "/cloudLink",
					Handler: document.CloudLinkHandler(serverCtx),
				},
				{
					// 复制
					Method:  http.MethodPut,
					Path:    "/copy",
					Handler: document.CopyHandler(serverCtx),
				},
				{
					// 创建本地上传文件
					Method:  http.MethodPost,
					Path:    "/createAssets",
					Handler: document.CreateAssetsHandler(serverCtx),
				},
				{
					// 上传文件夹
					Method:  http.MethodPost,
					Path:    "/createFolder",
					Handler: document.CreateFolderHandler(serverCtx),
				},
				{
					// 获取默认文件夹
					Method:  http.MethodPost,
					Path:    "/default",
					Handler: document.DefaultHandler(serverCtx),
				},
				{
					// 删除
					Method:  http.MethodDelete,
					Path:    "/del",
					Handler: document.DelHandler(serverCtx),
				},
				{
					// 查询资源列表
					Method:  http.MethodPost,
					Path:    "/document",
					Handler: document.DocumentHandler(serverCtx),
				},
				{
					// 传输中或者传输完成
					Method:  http.MethodPost,
					Path:    "/inTransit",
					Handler: document.InTransitHandler(serverCtx),
				},
				{
					// 标记
					Method:  http.MethodPut,
					Path:    "/isTag",
					Handler: document.IsTagHandler(serverCtx),
				},
				{
					// 移动
					Method:  http.MethodPut,
					Path:    "/move",
					Handler: document.MoveHandler(serverCtx),
				},
				{
					// 清空回收站
					Method:  http.MethodDelete,
					Path:    "/report",
					Handler: document.ReportHandler(serverCtx),
				},
				{
					// 还原资源
					Method:  http.MethodPut,
					Path:    "/restore",
					Handler: document.RestoreHandler(serverCtx),
				},
				{
					// 重命名
					Method:  http.MethodPut,
					Path:    "/rname",
					Handler: document.RnameHandler(serverCtx),
				},
				{
					// 分享保存资源
					Method:  http.MethodPost,
					Path:    "/saveAssets",
					Handler: document.SaveAssetsHandler(serverCtx),
				},
				{
					// 本地上传文件
					Method:  http.MethodPost,
					Path:    "/upload",
					Handler: document.UploadHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/user/document"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 绑定确认
					Method:  http.MethodPost,
					Path:    "/bingConfirm",
					Handler: message.BingConfirmHandler(serverCtx),
				},
				{
					// 绑定上级用户请求
					Method:  http.MethodPost,
					Path:    "/bingUser",
					Handler: message.BingUserHandler(serverCtx),
				},
				{
					// 消息列表
					Method:  http.MethodGet,
					Path:    "/messageList",
					Handler: message.MessageListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/user/message"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 增加阅览量
					Method:  http.MethodPut,
					Path:    "/addRead",
					Handler: share.AddReadHandler(serverCtx),
				},
				{
					// 增加保存量
					Method:  http.MethodPut,
					Path:    "/addSave",
					Handler: share.AddSaveHandler(serverCtx),
				},
				{
					// 添加分享
					Method:  http.MethodPost,
					Path:    "/addShare",
					Handler: share.AddShareHandler(serverCtx),
				},
				{
					// 删除分享
					Method:  http.MethodDelete,
					Path:    "/delShare",
					Handler: share.DelShareHandler(serverCtx),
				},
				{
					// 查看分享文件
					Method:  http.MethodGet,
					Path:    "/getShare",
					Handler: share.GetShareHandler(serverCtx),
				},
				{
					// 设置密码
					Method:  http.MethodPut,
					Path:    "/setSharePass",
					Handler: share.SetSharePassHandler(serverCtx),
				},
				{
					// 设置有效期
					Method:  http.MethodPut,
					Path:    "/setShareTime",
					Handler: share.SetShareTimeHandler(serverCtx),
				},
				{
					// 我的分享列表
					Method:  http.MethodGet,
					Path:    "/shareList",
					Handler: share.ShareListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/user/share"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 资源分享地址
				Method:  http.MethodGet,
				Path:    "/resource/:uuid",
				Handler: share.ShareFileUrlHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/user/share"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 完成任务
					Method:  http.MethodPut,
					Path:    "/taskComplete",
					Handler: task.TaskCompleteHandler(serverCtx),
				},
				{
					// 任务列表
					Method:  http.MethodGet,
					Path:    "/taskList",
					Handler: task.TaskListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/user/task"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 查看空投Token详情
					Method:  http.MethodGet,
					Path:    "/airdropToken",
					Handler: trade.GetAirdropTokenHandler(serverCtx),
				},
				{
					// 预计兑换积分
					Method:  http.MethodGet,
					Path:    "/estimatePoints",
					Handler: trade.EstimatePointsHandler(serverCtx),
				},
				{
					// 预计兑换空间
					Method:  http.MethodGet,
					Path:    "/estimateStorage",
					Handler: trade.EstimateStorageHandler(serverCtx),
				},
				{
					// 兑换积分
					Method:  http.MethodPost,
					Path:    "/exchange",
					Handler: trade.ExchangeHandler(serverCtx),
				},
				{
					// 兑换空间
					Method:  http.MethodPost,
					Path:    "/exchangeStorage",
					Handler: trade.ExchangeStorageHandler(serverCtx),
				},
				{
					// 兑换空投
					Method:  http.MethodPost,
					Path:    "/exchangeToken",
					Handler: trade.ExchangeTokenHandler(serverCtx),
				},
				{
					// 用户兑换空间查询
					Method:  http.MethodGet,
					Path:    "/userSpace",
					Handler: trade.UserSpaceHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/user/trade"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 传输中回调
					Method:  http.MethodPut,
					Path:    "/assetCallback",
					Handler: transmission.AssetCallbackHandler(serverCtx),
				},
				{
					// 创建本地上传文件
					Method:  http.MethodPost,
					Path:    "/createAssetFile",
					Handler: transmission.CreateAssetFileHandler(serverCtx),
				},
				{
					// 删除
					Method:  http.MethodDelete,
					Path:    "/delTransmission",
					Handler: transmission.DelTransmissionHandler(serverCtx),
				},
				{
					// 传输中列表打标记
					Method:  http.MethodPost,
					Path:    "/isTagAssetFile",
					Handler: transmission.IsTagHandler(serverCtx),
				},
				{
					// 传输中或者传输完成
					Method:  http.MethodPost,
					Path:    "/list",
					Handler: transmission.ListHandler(serverCtx),
				},
				{
					// 重试
					Method:  http.MethodPost,
					Path:    "/retry",
					Handler: transmission.RetryHandler(serverCtx),
				},
				{
					// 修改传输中状态为失败
					Method:  http.MethodPut,
					Path:    "/updateTransmission",
					Handler: transmission.UpdateTransmissionHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/user/transmission"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					// 检测是否有领取资格
					Method:  http.MethodPost,
					Path:    "/checkReceive",
					Handler: user.CheckReceiveHandler(serverCtx),
				},
				{
					// 领取奖励
					Method:  http.MethodGet,
					Path:    "/claimReward",
					Handler: user.ClaimRewardHandler(serverCtx),
				},
				{
					// 删除用户
					Method:  http.MethodDelete,
					Path:    "/delUser",
					Handler: user.DelUserHandler(serverCtx),
				},
				{
					// 获取加密参数的rsa公钥
					Method:  http.MethodGet,
					Path:    "/getPublicKey",
					Handler: user.GetRsaPublicKeyHandler(serverCtx),
				},
				{
					// 添加引导页奖励
					Method:  http.MethodPost,
					Path:    "/guide",
					Handler: user.GuideHandler(serverCtx),
				},
				{
					// 引导页奖励
					Method:  http.MethodGet,
					Path:    "/guideReward",
					Handler: user.GuideRewardHandler(serverCtx),
				},
				{
					// 登录
					Method:  http.MethodPost,
					Path:    "/login",
					Handler: user.LoginHandler(serverCtx),
				},
				{
					// 获取首页排行
					Method:  http.MethodGet,
					Path:    "/racking",
					Handler: user.RackingHandler(serverCtx),
				},
				{
					// 获取排行信息
					Method:  http.MethodGet,
					Path:    "/rackingList",
					Handler: user.RackingListHandler(serverCtx),
				},
				{
					// 领取活动积分
					Method:  http.MethodPost,
					Path:    "/receivePoints",
					Handler: user.ReceivePointsHandler(serverCtx),
				},
				{
					// token续期
					Method:  http.MethodPost,
					Path:    "/renewal",
					Handler: user.RenewalHandler(serverCtx),
				},
				{
					// 奖励记录
					Method:  http.MethodGet,
					Path:    "/rewardList",
					Handler: user.RewardListHandler(serverCtx),
				},
				{
					// 设置用户语言
					Method:  http.MethodPost,
					Path:    "/setLanguage",
					Handler: user.SetLanguageHandler(serverCtx),
				},
				{
					// 修改用户为阅读注意事项为已阅读
					Method:  http.MethodPut,
					Path:    "/updateReadStatus",
					Handler: user.UpdateReadStatusHandler(serverCtx),
				},
				{
					// 获取用户信息
					Method:  http.MethodGet,
					Path:    "/userInfo",
					Handler: user.UserInfoHandler(serverCtx),
				},
				{
					// 获取用户引荐计划
					Method:  http.MethodGet,
					Path:    "/userRecommendPlan",
					Handler: user.UserRecommendPlanHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/user"),
	)
}
