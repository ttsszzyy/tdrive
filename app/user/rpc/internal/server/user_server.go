// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"T-driver/app/user/rpc/internal/logic"
	"T-driver/app/user/rpc/internal/svc"
	"T-driver/app/user/rpc/pb"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

// 用户端
func (s *UserServer) FindOneByUid(ctx context.Context, in *pb.UidReq) (*pb.User, error) {
	l := logic.NewFindOneByUidLogic(ctx, s.svcCtx)
	return l.FindOneByUid(in)
}

// 保存用户
func (s *UserServer) SaveUser(ctx context.Context, in *pb.User) (*pb.Response, error) {
	l := logic.NewSaveUserLogic(ctx, s.svcCtx)
	return l.SaveUser(in)
}

// 删除用户
func (s *UserServer) DelUser(ctx context.Context, in *pb.DelUserReq) (*pb.Response, error) {
	l := logic.NewDelUserLogic(ctx, s.svcCtx)
	return l.DelUser(in)
}

// 查询推荐用户
func (s *UserServer) FindUserByPid(ctx context.Context, in *pb.FindUserByPidReq) (*pb.UserList, error) {
	l := logic.NewFindUserByPidLogic(ctx, s.svcCtx)
	return l.FindUserByPid(in)
}

func (s *UserServer) FindUser(ctx context.Context, in *pb.QueryUserReq) (*pb.UserList, error) {
	l := logic.NewFindUserLogic(ctx, s.svcCtx)
	return l.FindUser(in)
}

// 根据用户邀请码查询用户
func (s *UserServer) FindUserByCode(ctx context.Context, in *pb.UserCodeReq) (*pb.User, error) {
	l := logic.NewFindUserByCodeLogic(ctx, s.svcCtx)
	return l.FindUserByCode(in)
}

// 查询用戶邀請數量
func (s *UserServer) CountUserInvite(ctx context.Context, in *pb.CountUserInviteReq) (*pb.CountUserInviteResp, error) {
	l := logic.NewCountUserInviteLogic(ctx, s.svcCtx)
	return l.CountUserInvite(in)
}

// 查询奖励空间总数
func (s *UserServer) CountUserByExchangeStorage(ctx context.Context, in *pb.CountUserByExchangeStorageReq) (*pb.CountUserByExchangeStorageResp, error) {
	l := logic.NewCountUserByExchangeStorageLogic(ctx, s.svcCtx)
	return l.CountUserByExchangeStorage(in)
}

// 校验用户是否邀请过
func (s *UserServer) CheckUserInvite(ctx context.Context, in *pb.CheckUserInviteReq) (*pb.CheckUserInviteResp, error) {
	l := logic.NewCheckUserInviteLogic(ctx, s.svcCtx)
	return l.CheckUserInvite(in)
}

// 用户积分
func (s *UserServer) FindOneUserPoints(ctx context.Context, in *pb.FindOneUserPointsReq) (*pb.FindOneUserPointsResp, error) {
	l := logic.NewFindOneUserPointsLogic(ctx, s.svcCtx)
	return l.FindOneUserPoints(in)
}

func (s *UserServer) FindUserPoints(ctx context.Context, in *pb.FindUserPointsReq) (*pb.FindUserPointsResp, error) {
	l := logic.NewFindUserPointsLogic(ctx, s.svcCtx)
	return l.FindUserPoints(in)
}

// 用户存储空间
func (s *UserServer) FindOneUserStorage(ctx context.Context, in *pb.FindOneUserStorageReq) (*pb.FindOneUserStorageResp, error) {
	l := logic.NewFindOneUserStorageLogic(ctx, s.svcCtx)
	return l.FindOneUserStorage(in)
}

// 用户空间兑换列表
func (s *UserServer) FindUserStorageExchange(ctx context.Context, in *pb.FindUserStorageExchangeReq) (*pb.FindUserStorageExchangeRespList, error) {
	l := logic.NewFindUserStorageExchangeLogic(ctx, s.svcCtx)
	return l.FindUserStorageExchange(in)
}

// 保存用户积分和空间
func (s *UserServer) SaveUserPointsAndStorage(ctx context.Context, in *pb.SaveUserPointsAndStorageReq) (*pb.Response, error) {
	l := logic.NewSaveUserPointsAndStorageLogic(ctx, s.svcCtx)
	return l.SaveUserPointsAndStorage(in)
}

// 领取用户奖励空间
func (s *UserServer) ReceiveUser(ctx context.Context, in *pb.ReceiveUserReq) (*pb.Response, error) {
	l := logic.NewReceiveUserLogic(ctx, s.svcCtx)
	return l.ReceiveUser(in)
}

// 校验是否满足领取条件
func (s *UserServer) CheckReceive(ctx context.Context, in *pb.ReceiveActionPointsReq) (*pb.Response, error) {
	l := logic.NewCheckReceiveLogic(ctx, s.svcCtx)
	return l.CheckReceive(in)
}

// 用户领取活动积分
func (s *UserServer) ReceiveActionPoints(ctx context.Context, in *pb.ReceiveActionPointsReq) (*pb.Response, error) {
	l := logic.NewReceiveActionPointsLogic(ctx, s.svcCtx)
	return l.ReceiveActionPoints(in)
}

func (s *UserServer) CheckIsOldUser(ctx context.Context, in *pb.UidReq) (*pb.IsOldUserResp, error) {
	l := logic.NewCheckIsOldUserLogic(ctx, s.svcCtx)
	return l.CheckIsOldUser(in)
}

// 用户预订空投
func (s *UserServer) GetUserStorageAndToken(ctx context.Context, in *pb.UidReq) (*pb.UserStorageAndToken, error) {
	l := logic.NewGetUserStorageAndTokenLogic(ctx, s.svcCtx)
	return l.GetUserStorageAndToken(in)
}

func (s *UserServer) SaveUserToken(ctx context.Context, in *pb.SaveUserTokenReq) (*pb.Response, error) {
	l := logic.NewSaveUserTokenLogic(ctx, s.svcCtx)
	return l.SaveUserToken(in)
}

// 发送消息
func (s *UserServer) SaveMessage(ctx context.Context, in *pb.SaveMessageReq) (*pb.Response, error) {
	l := logic.NewSaveMessageLogic(ctx, s.svcCtx)
	return l.SaveMessage(in)
}

// 删除消息
func (s *UserServer) DelMessage(ctx context.Context, in *pb.DelMessageReq) (*pb.Response, error) {
	l := logic.NewDelMessageLogic(ctx, s.svcCtx)
	return l.DelMessage(in)
}

// 查询消息
func (s *UserServer) FindMessage(ctx context.Context, in *pb.FindMessageReq) (*pb.FindMessageResp, error) {
	l := logic.NewFindMessageLogic(ctx, s.svcCtx)
	return l.FindMessage(in)
}

// 查询用户任务列表
func (s *UserServer) FindTask(ctx context.Context, in *pb.FindTaskReq) (*pb.TaskResp, error) {
	l := logic.NewFindTaskLogic(ctx, s.svcCtx)
	return l.FindTask(in)
}

func (s *UserServer) FindOneTask(ctx context.Context, in *pb.FindOneTaskReq) (*pb.Task, error) {
	l := logic.NewFindOneTaskLogic(ctx, s.svcCtx)
	return l.FindOneTask(in)
}

// 修改任务完成状态
func (s *UserServer) UpdateTask(ctx context.Context, in *pb.UpdateTaskReq) (*pb.Response, error) {
	l := logic.NewUpdateTaskLogic(ctx, s.svcCtx)
	return l.UpdateTask(in)
}

func (s *UserServer) SaveTask(ctx context.Context, in *pb.SaveTaskReq) (*pb.Response, error) {
	l := logic.NewSaveTaskLogic(ctx, s.svcCtx)
	return l.SaveTask(in)
}

// 保存分享资源
func (s *UserServer) SaveShare(ctx context.Context, in *pb.SaveShareReq) (*pb.Response, error) {
	l := logic.NewSaveShareLogic(ctx, s.svcCtx)
	return l.SaveShare(in)
}

// 修改分享资源密码和有效期
func (s *UserServer) UpdateShare(ctx context.Context, in *pb.UpdateShareReq) (*pb.Response, error) {
	l := logic.NewUpdateShareLogic(ctx, s.svcCtx)
	return l.UpdateShare(in)
}

// 查看分享资源
func (s *UserServer) FindShare(ctx context.Context, in *pb.FindShareReq) (*pb.FindShareResp, error) {
	l := logic.NewFindShareLogic(ctx, s.svcCtx)
	return l.FindShare(in)
}

// 查看分享资源
func (s *UserServer) FindOneShare(ctx context.Context, in *pb.FindOneShareReq) (*pb.Share, error) {
	l := logic.NewFindOneShareLogic(ctx, s.svcCtx)
	return l.FindOneShare(in)
}

// 删除分享资源
func (s *UserServer) DelShare(ctx context.Context, in *pb.FindOneShareReq) (*pb.Response, error) {
	l := logic.NewDelShareLogic(ctx, s.svcCtx)
	return l.DelShare(in)
}

// 保存资源
func (s *UserServer) SaveAssets(ctx context.Context, in *pb.SaveAssetsReq) (*pb.SaveAssetsResp, error) {
	l := logic.NewSaveAssetsLogic(ctx, s.svcCtx)
	return l.SaveAssets(in)
}

// 修改资源name,*tag,status,cid,link
func (s *UserServer) UpdateAssetsName(ctx context.Context, in *pb.UpdateAssetsNameReq) (*pb.Response, error) {
	l := logic.NewUpdateAssetsNameLogic(ctx, s.svcCtx)
	return l.UpdateAssetsName(in)
}

// 资源移动
func (s *UserServer) UpdateAssetsMove(ctx context.Context, in *pb.UpdateAssetsMoveReq) (*pb.Response, error) {
	l := logic.NewUpdateAssetsMoveLogic(ctx, s.svcCtx)
	return l.UpdateAssetsMove(in)
}

// 资源复制
func (s *UserServer) UpdateAssetsCopy(ctx context.Context, in *pb.UpdateAssetsCopyReq) (*pb.Response, error) {
	l := logic.NewUpdateAssetsCopyLogic(ctx, s.svcCtx)
	return l.UpdateAssetsCopy(in)
}

// 资源删除
func (s *UserServer) DelAssets(ctx context.Context, in *pb.DelAssetsReq) (*pb.Response, error) {
	l := logic.NewDelAssetsLogic(ctx, s.svcCtx)
	return l.DelAssets(in)
}

// 查看资源
func (s *UserServer) FindAssets(ctx context.Context, in *pb.FindAssetsReq) (*pb.FindAssetsResp, error) {
	l := logic.NewFindAssetsLogic(ctx, s.svcCtx)
	return l.FindAssets(in)
}

func (s *UserServer) FindAssetsNoDel(ctx context.Context, in *pb.FindAssetsReq) (*pb.FindAssetsResp, error) {
	l := logic.NewFindAssetsNoDelLogic(ctx, s.svcCtx)
	return l.FindAssetsNoDel(in)
}

// 查看资源
func (s *UserServer) FindOneAssets(ctx context.Context, in *pb.FindOneAssetsReq) (*pb.Assets, error) {
	l := logic.NewFindOneAssetsLogic(ctx, s.svcCtx)
	return l.FindOneAssets(in)
}

// 还原资源
func (s *UserServer) RestoreAssets(ctx context.Context, in *pb.DelAssetsReq) (*pb.Response, error) {
	l := logic.NewRestoreAssetsLogic(ctx, s.svcCtx)
	return l.RestoreAssets(in)
}

// 清理资源
func (s *UserServer) ClearAssets(ctx context.Context, in *pb.DelAssetsReq) (*pb.Response, error) {
	l := logic.NewClearAssetsLogic(ctx, s.svcCtx)
	return l.ClearAssets(in)
}

// 查看资源数据量
func (s *UserServer) CountAssets(ctx context.Context, in *pb.CountAssetsReq) (*pb.CountAssetsResp, error) {
	l := logic.NewCountAssetsLogic(ctx, s.svcCtx)
	return l.CountAssets(in)
}

// 获取资源目录下的所有子资源id
func (s *UserServer) GetAllAssetIds(ctx context.Context, in *pb.GetAllAssetIDsReq) (*pb.AllAssetIDsRes, error) {
	l := logic.NewGetAllAssetIdsLogic(ctx, s.svcCtx)
	return l.GetAllAssetIds(in)
}

// 查看邀请奖励
func (s *UserServer) FindUserRewardIntegral(ctx context.Context, in *pb.FindUserRewardIntegralReq) (*pb.FindUserRewardIntegralResp, error) {
	l := logic.NewFindUserRewardIntegralLogic(ctx, s.svcCtx)
	return l.FindUserRewardIntegral(in)
}

// 保存邀请奖励
func (s *UserServer) SaveUserReward(ctx context.Context, in *pb.SaveUserRewardReq) (*pb.Response, error) {
	l := logic.NewSaveUserRewardLogic(ctx, s.svcCtx)
	return l.SaveUserReward(in)
}

// 领取邀请奖励
func (s *UserServer) ClaimInviteReward(ctx context.Context, in *pb.ClaimInviteRewardReq) (*pb.Response, error) {
	l := logic.NewClaimInviteRewardLogic(ctx, s.svcCtx)
	return l.ClaimInviteReward(in)
}

// 朋友列表
func (s *UserServer) FindUserInvite(ctx context.Context, in *pb.FindUserInviteReq) (*pb.FindUserInviteResp, error) {
	l := logic.NewFindUserInviteLogic(ctx, s.svcCtx)
	return l.FindUserInvite(in)
}

// 管理端
func (s *UserServer) FindOneByAccountDeletedTime(ctx context.Context, in *pb.AccountReq) (*pb.Admin, error) {
	l := logic.NewFindOneByAccountDeletedTimeLogic(ctx, s.svcCtx)
	return l.FindOneByAccountDeletedTime(in)
}

func (s *UserServer) FindOneByIdAccountDeletedTime(ctx context.Context, in *pb.AccountReq) (*pb.Admin, error) {
	l := logic.NewFindOneByIdAccountDeletedTimeLogic(ctx, s.svcCtx)
	return l.FindOneByIdAccountDeletedTime(in)
}

// 管理端列表
func (s *UserServer) FindAdminByIdAccountIsDisableDeletedTime(ctx context.Context, in *pb.AdminReq) (*pb.QueryAdminRes, error) {
	l := logic.NewFindAdminByIdAccountIsDisableDeletedTimeLogic(ctx, s.svcCtx)
	return l.FindAdminByIdAccountIsDisableDeletedTime(in)
}

// 保存管理端用户
func (s *UserServer) SaveAdmin(ctx context.Context, in *pb.Admin) (*pb.Response, error) {
	l := logic.NewSaveAdminLogic(ctx, s.svcCtx)
	return l.SaveAdmin(in)
}

// 保存管理端用户
func (s *UserServer) DelAdmin(ctx context.Context, in *pb.DelTaskPoolByIdReq) (*pb.Response, error) {
	l := logic.NewDelAdminLogic(ctx, s.svcCtx)
	return l.DelAdmin(in)
}

// 查询用户信息 返回剩余积分、总空间、剩余空间
func (s *UserServer) FindUserByNameIsDisable(ctx context.Context, in *pb.QueryUserReq) (*pb.QueryUserRes, error) {
	l := logic.NewFindUserByNameIsDisableLogic(ctx, s.svcCtx)
	return l.FindUserByNameIsDisable(in)
}

// 禁用用户
func (s *UserServer) DisableUser(ctx context.Context, in *pb.DisableUserReq) (*pb.Response, error) {
	l := logic.NewDisableUserLogic(ctx, s.svcCtx)
	return l.DisableUser(in)
}

// 保存任务池
func (s *UserServer) SaveTaskPool(ctx context.Context, in *pb.SaveTaskPoolReq) (*pb.Response, error) {
	l := logic.NewSaveTaskPoolLogic(ctx, s.svcCtx)
	return l.SaveTaskPool(in)
}

// 查询任务池
func (s *UserServer) FindTaskPoolByTaskType(ctx context.Context, in *pb.FindTaskPoolByTaskTypeReq) (*pb.TaskPoolListResp, error) {
	l := logic.NewFindTaskPoolByTaskTypeLogic(ctx, s.svcCtx)
	return l.FindTaskPoolByTaskType(in)
}

// 删除任务池
func (s *UserServer) DelTaskPoolById(ctx context.Context, in *pb.DelTaskPoolByIdReq) (*pb.Response, error) {
	l := logic.NewDelTaskPoolByIdLogic(ctx, s.svcCtx)
	return l.DelTaskPoolById(in)
}

// 保存数据字典
func (s *UserServer) SaveDict(ctx context.Context, in *pb.SaveDictReq) (*pb.Response, error) {
	l := logic.NewSaveDictLogic(ctx, s.svcCtx)
	return l.SaveDict(in)
}

// 查询数据字典 name And code
func (s *UserServer) FindDictByName(ctx context.Context, in *pb.FindDictByNameReq) (*pb.FindDictByNameResp, error) {
	l := logic.NewFindDictByNameLogic(ctx, s.svcCtx)
	return l.FindDictByName(in)
}

// 添加pin消息
func (s *UserServer) SaveBotPinMsg(ctx context.Context, in *pb.SaveBotPinMsgReq) (*pb.Response, error) {
	l := logic.NewSaveBotPinMsgLogic(ctx, s.svcCtx)
	return l.SaveBotPinMsg(in)
}

// 删除pin消息
func (s *UserServer) DelBotPinMsg(ctx context.Context, in *pb.DelBotPinMsgReq) (*pb.Response, error) {
	l := logic.NewDelBotPinMsgLogic(ctx, s.svcCtx)
	return l.DelBotPinMsg(in)
}

// 查询pin消息
func (s *UserServer) FindBotPinMsg(ctx context.Context, in *pb.FindBotPinMsgReq) (*pb.FindBotPinMsgResp, error) {
	l := logic.NewFindBotPinMsgLogic(ctx, s.svcCtx)
	return l.FindBotPinMsg(in)
}

// 保存bot命令
func (s *UserServer) SaveBotCommand(ctx context.Context, in *pb.SaveBotCommandReq) (*pb.Response, error) {
	l := logic.NewSaveBotCommandLogic(ctx, s.svcCtx)
	return l.SaveBotCommand(in)
}

// 查询bot命令
func (s *UserServer) FindBotCommand(ctx context.Context, in *pb.FindBotCommandReq) (*pb.FindBotCommandResp, error) {
	l := logic.NewFindBotCommandLogic(ctx, s.svcCtx)
	return l.FindBotCommand(in)
}

// 删除bot命令
func (s *UserServer) DelBotCommand(ctx context.Context, in *pb.DelBotCommandReq) (*pb.Response, error) {
	l := logic.NewDelBotCommandLogic(ctx, s.svcCtx)
	return l.DelBotCommand(in)
}

// 查询bot命令
func (s *UserServer) FindOneBotCommand(ctx context.Context, in *pb.FindOneBotCommandReq) (*pb.BotCommandItem, error) {
	l := logic.NewFindOneBotCommandLogic(ctx, s.svcCtx)
	return l.FindOneBotCommand(in)
}

// 保存传输中资源
func (s *UserServer) SaveAssetFile(ctx context.Context, in *pb.SaveAssetFileReq) (*pb.SaveAssetFileResp, error) {
	l := logic.NewSaveAssetFileLogic(ctx, s.svcCtx)
	return l.SaveAssetFile(in)
}

// 修改传输中资源tag,status,cid,link,assetId
func (s *UserServer) UpdateAssetFile(ctx context.Context, in *pb.UpdateAssetFileReq) (*pb.UpdateAssetResp, error) {
	l := logic.NewUpdateAssetFileLogic(ctx, s.svcCtx)
	return l.UpdateAssetFile(in)
}

// 资源传输中删除
func (s *UserServer) DelAssetFile(ctx context.Context, in *pb.DelAssetFileReq) (*pb.Response, error) {
	l := logic.NewDelAssetFileLogic(ctx, s.svcCtx)
	return l.DelAssetFile(in)
}

// 查看传输中资源
func (s *UserServer) FindAssetFile(ctx context.Context, in *pb.FindAssetFileReq) (*pb.FindAssetFileResp, error) {
	l := logic.NewFindAssetFileLogic(ctx, s.svcCtx)
	return l.FindAssetFile(in)
}

// 查看传输中资源
func (s *UserServer) FindOneAssetFile(ctx context.Context, in *pb.FindOneAssetFileReq) (*pb.AssetFile, error) {
	l := logic.NewFindOneAssetFileLogic(ctx, s.svcCtx)
	return l.FindOneAssetFile(in)
}

// 保存用户titan token
func (s *UserServer) SaveUserTitanToken(ctx context.Context, in *pb.SaveUserTitanTokenReq) (*pb.Response, error) {
	l := logic.NewSaveUserTitanTokenLogic(ctx, s.svcCtx)
	return l.SaveUserTitanToken(in)
}

// 查询用户titan token
func (s *UserServer) FindOneUserTitanToken(ctx context.Context, in *pb.FindOneUserTitanTokenReq) (*pb.UserTitanToken, error) {
	l := logic.NewFindOneUserTitanTokenLogic(ctx, s.svcCtx)
	return l.FindOneUserTitanToken(in)
}

// 修改用户titan token
func (s *UserServer) UpdateUserTitanToken(ctx context.Context, in *pb.UpdateUserTitanTokenReq) (*pb.Response, error) {
	l := logic.NewUpdateUserTitanTokenLogic(ctx, s.svcCtx)
	return l.UpdateUserTitanToken(in)
}
