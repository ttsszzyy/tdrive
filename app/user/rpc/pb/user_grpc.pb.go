// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: proto/user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	User_FindOneByUid_FullMethodName                             = "/pb.user/FindOneByUid"
	User_SaveUser_FullMethodName                                 = "/pb.user/SaveUser"
	User_DelUser_FullMethodName                                  = "/pb.user/DelUser"
	User_FindUserByPid_FullMethodName                            = "/pb.user/FindUserByPid"
	User_FindUser_FullMethodName                                 = "/pb.user/FindUser"
	User_FindUserByCode_FullMethodName                           = "/pb.user/FindUserByCode"
	User_CountUserInvite_FullMethodName                          = "/pb.user/CountUserInvite"
	User_CountUserByExchangeStorage_FullMethodName               = "/pb.user/CountUserByExchangeStorage"
	User_CheckUserInvite_FullMethodName                          = "/pb.user/CheckUserInvite"
	User_FindOneUserPoints_FullMethodName                        = "/pb.user/FindOneUserPoints"
	User_FindUserPoints_FullMethodName                           = "/pb.user/FindUserPoints"
	User_FindOneUserStorage_FullMethodName                       = "/pb.user/FindOneUserStorage"
	User_FindUserStorageExchange_FullMethodName                  = "/pb.user/FindUserStorageExchange"
	User_SaveUserPointsAndStorage_FullMethodName                 = "/pb.user/SaveUserPointsAndStorage"
	User_ReceiveUser_FullMethodName                              = "/pb.user/ReceiveUser"
	User_CheckReceive_FullMethodName                             = "/pb.user/CheckReceive"
	User_ReceiveActionPoints_FullMethodName                      = "/pb.user/ReceiveActionPoints"
	User_CheckIsOldUser_FullMethodName                           = "/pb.user/CheckIsOldUser"
	User_GetUserStorageAndToken_FullMethodName                   = "/pb.user/GetUserStorageAndToken"
	User_SaveUserToken_FullMethodName                            = "/pb.user/SaveUserToken"
	User_SaveMessage_FullMethodName                              = "/pb.user/SaveMessage"
	User_DelMessage_FullMethodName                               = "/pb.user/DelMessage"
	User_FindMessage_FullMethodName                              = "/pb.user/FindMessage"
	User_FindTask_FullMethodName                                 = "/pb.user/FindTask"
	User_FindOneTask_FullMethodName                              = "/pb.user/FindOneTask"
	User_UpdateTask_FullMethodName                               = "/pb.user/UpdateTask"
	User_SaveTask_FullMethodName                                 = "/pb.user/SaveTask"
	User_SaveShare_FullMethodName                                = "/pb.user/SaveShare"
	User_UpdateShare_FullMethodName                              = "/pb.user/UpdateShare"
	User_FindShare_FullMethodName                                = "/pb.user/FindShare"
	User_FindOneShare_FullMethodName                             = "/pb.user/FindOneShare"
	User_DelShare_FullMethodName                                 = "/pb.user/DelShare"
	User_SaveAssets_FullMethodName                               = "/pb.user/SaveAssets"
	User_UpdateAssetsName_FullMethodName                         = "/pb.user/UpdateAssetsName"
	User_UpdateAssetsMove_FullMethodName                         = "/pb.user/UpdateAssetsMove"
	User_UpdateAssetsCopy_FullMethodName                         = "/pb.user/UpdateAssetsCopy"
	User_DelAssets_FullMethodName                                = "/pb.user/DelAssets"
	User_FindAssets_FullMethodName                               = "/pb.user/FindAssets"
	User_FindAssetsNoDel_FullMethodName                          = "/pb.user/FindAssetsNoDel"
	User_FindOneAssets_FullMethodName                            = "/pb.user/FindOneAssets"
	User_RestoreAssets_FullMethodName                            = "/pb.user/RestoreAssets"
	User_ClearAssets_FullMethodName                              = "/pb.user/ClearAssets"
	User_CountAssets_FullMethodName                              = "/pb.user/CountAssets"
	User_GetAllAssetIds_FullMethodName                           = "/pb.user/GetAllAssetIds"
	User_FindUserRewardIntegral_FullMethodName                   = "/pb.user/FindUserRewardIntegral"
	User_SaveUserReward_FullMethodName                           = "/pb.user/SaveUserReward"
	User_ClaimInviteReward_FullMethodName                        = "/pb.user/ClaimInviteReward"
	User_FindUserInvite_FullMethodName                           = "/pb.user/FindUserInvite"
	User_FindOneByAccountDeletedTime_FullMethodName              = "/pb.user/FindOneByAccountDeletedTime"
	User_FindOneByIdAccountDeletedTime_FullMethodName            = "/pb.user/FindOneByIdAccountDeletedTime"
	User_FindAdminByIdAccountIsDisableDeletedTime_FullMethodName = "/pb.user/FindAdminByIdAccountIsDisableDeletedTime"
	User_SaveAdmin_FullMethodName                                = "/pb.user/SaveAdmin"
	User_DelAdmin_FullMethodName                                 = "/pb.user/DelAdmin"
	User_FindUserByNameIsDisable_FullMethodName                  = "/pb.user/FindUserByNameIsDisable"
	User_DisableUser_FullMethodName                              = "/pb.user/DisableUser"
	User_SaveTaskPool_FullMethodName                             = "/pb.user/SaveTaskPool"
	User_FindTaskPoolByTaskType_FullMethodName                   = "/pb.user/FindTaskPoolByTaskType"
	User_DelTaskPoolById_FullMethodName                          = "/pb.user/DelTaskPoolById"
	User_SaveDict_FullMethodName                                 = "/pb.user/SaveDict"
	User_FindDictByName_FullMethodName                           = "/pb.user/FindDictByName"
	User_SaveBotPinMsg_FullMethodName                            = "/pb.user/SaveBotPinMsg"
	User_DelBotPinMsg_FullMethodName                             = "/pb.user/DelBotPinMsg"
	User_FindBotPinMsg_FullMethodName                            = "/pb.user/FindBotPinMsg"
	User_SaveBotCommand_FullMethodName                           = "/pb.user/SaveBotCommand"
	User_FindBotCommand_FullMethodName                           = "/pb.user/FindBotCommand"
	User_DelBotCommand_FullMethodName                            = "/pb.user/DelBotCommand"
	User_FindOneBotCommand_FullMethodName                        = "/pb.user/FindOneBotCommand"
	User_SaveAssetFile_FullMethodName                            = "/pb.user/SaveAssetFile"
	User_UpdateAssetFile_FullMethodName                          = "/pb.user/UpdateAssetFile"
	User_DelAssetFile_FullMethodName                             = "/pb.user/DelAssetFile"
	User_FindAssetFile_FullMethodName                            = "/pb.user/FindAssetFile"
	User_FindOneAssetFile_FullMethodName                         = "/pb.user/FindOneAssetFile"
	User_SaveUserTitanToken_FullMethodName                       = "/pb.user/SaveUserTitanToken"
	User_FindOneUserTitanToken_FullMethodName                    = "/pb.user/FindOneUserTitanToken"
	User_UpdateUserTitanToken_FullMethodName                     = "/pb.user/UpdateUserTitanToken"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// 用户端
	FindOneByUid(ctx context.Context, in *UidReq, opts ...grpc.CallOption) (*User, error)
	// 保存用户
	SaveUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error)
	// 删除用户
	DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*Response, error)
	// 查询推荐用户
	FindUserByPid(ctx context.Context, in *FindUserByPidReq, opts ...grpc.CallOption) (*UserList, error)
	FindUser(ctx context.Context, in *QueryUserReq, opts ...grpc.CallOption) (*UserList, error)
	// 根据用户邀请码查询用户
	FindUserByCode(ctx context.Context, in *UserCodeReq, opts ...grpc.CallOption) (*User, error)
	// 查询用戶邀請數量
	CountUserInvite(ctx context.Context, in *CountUserInviteReq, opts ...grpc.CallOption) (*CountUserInviteResp, error)
	// 查询奖励空间总数
	CountUserByExchangeStorage(ctx context.Context, in *CountUserByExchangeStorageReq, opts ...grpc.CallOption) (*CountUserByExchangeStorageResp, error)
	// 校验用户是否邀请过
	CheckUserInvite(ctx context.Context, in *CheckUserInviteReq, opts ...grpc.CallOption) (*CheckUserInviteResp, error)
	// 用户积分
	FindOneUserPoints(ctx context.Context, in *FindOneUserPointsReq, opts ...grpc.CallOption) (*FindOneUserPointsResp, error)
	FindUserPoints(ctx context.Context, in *FindUserPointsReq, opts ...grpc.CallOption) (*FindUserPointsResp, error)
	// 用户存储空间
	FindOneUserStorage(ctx context.Context, in *FindOneUserStorageReq, opts ...grpc.CallOption) (*FindOneUserStorageResp, error)
	// 用户空间兑换列表
	FindUserStorageExchange(ctx context.Context, in *FindUserStorageExchangeReq, opts ...grpc.CallOption) (*FindUserStorageExchangeRespList, error)
	// 保存用户积分和空间
	SaveUserPointsAndStorage(ctx context.Context, in *SaveUserPointsAndStorageReq, opts ...grpc.CallOption) (*Response, error)
	// 领取用户奖励空间
	ReceiveUser(ctx context.Context, in *ReceiveUserReq, opts ...grpc.CallOption) (*Response, error)
	// 校验是否满足领取条件
	CheckReceive(ctx context.Context, in *ReceiveActionPointsReq, opts ...grpc.CallOption) (*Response, error)
	// 用户领取活动积分
	ReceiveActionPoints(ctx context.Context, in *ReceiveActionPointsReq, opts ...grpc.CallOption) (*Response, error)
	CheckIsOldUser(ctx context.Context, in *UidReq, opts ...grpc.CallOption) (*IsOldUserResp, error)
	// 用户预订空投
	GetUserStorageAndToken(ctx context.Context, in *UidReq, opts ...grpc.CallOption) (*UserStorageAndToken, error)
	SaveUserToken(ctx context.Context, in *SaveUserTokenReq, opts ...grpc.CallOption) (*Response, error)
	// 发送消息
	SaveMessage(ctx context.Context, in *SaveMessageReq, opts ...grpc.CallOption) (*Response, error)
	// 删除消息
	DelMessage(ctx context.Context, in *DelMessageReq, opts ...grpc.CallOption) (*Response, error)
	// 查询消息
	FindMessage(ctx context.Context, in *FindMessageReq, opts ...grpc.CallOption) (*FindMessageResp, error)
	// 查询用户任务列表
	FindTask(ctx context.Context, in *FindTaskReq, opts ...grpc.CallOption) (*TaskResp, error)
	FindOneTask(ctx context.Context, in *FindOneTaskReq, opts ...grpc.CallOption) (*Task, error)
	// 修改任务完成状态
	UpdateTask(ctx context.Context, in *UpdateTaskReq, opts ...grpc.CallOption) (*Response, error)
	SaveTask(ctx context.Context, in *SaveTaskReq, opts ...grpc.CallOption) (*Response, error)
	// 保存分享资源
	SaveShare(ctx context.Context, in *SaveShareReq, opts ...grpc.CallOption) (*Response, error)
	// 修改分享资源密码和有效期
	UpdateShare(ctx context.Context, in *UpdateShareReq, opts ...grpc.CallOption) (*Response, error)
	// 查看分享资源
	FindShare(ctx context.Context, in *FindShareReq, opts ...grpc.CallOption) (*FindShareResp, error)
	// 查看分享资源
	FindOneShare(ctx context.Context, in *FindOneShareReq, opts ...grpc.CallOption) (*Share, error)
	// 删除分享资源
	DelShare(ctx context.Context, in *FindOneShareReq, opts ...grpc.CallOption) (*Response, error)
	// 保存资源
	SaveAssets(ctx context.Context, in *SaveAssetsReq, opts ...grpc.CallOption) (*SaveAssetsResp, error)
	// 修改资源name,*tag,status,cid,link
	UpdateAssetsName(ctx context.Context, in *UpdateAssetsNameReq, opts ...grpc.CallOption) (*Response, error)
	// 资源移动
	UpdateAssetsMove(ctx context.Context, in *UpdateAssetsMoveReq, opts ...grpc.CallOption) (*Response, error)
	// 资源复制
	UpdateAssetsCopy(ctx context.Context, in *UpdateAssetsCopyReq, opts ...grpc.CallOption) (*Response, error)
	// 资源删除
	DelAssets(ctx context.Context, in *DelAssetsReq, opts ...grpc.CallOption) (*Response, error)
	// 查看资源
	FindAssets(ctx context.Context, in *FindAssetsReq, opts ...grpc.CallOption) (*FindAssetsResp, error)
	FindAssetsNoDel(ctx context.Context, in *FindAssetsReq, opts ...grpc.CallOption) (*FindAssetsResp, error)
	// 查看资源
	FindOneAssets(ctx context.Context, in *FindOneAssetsReq, opts ...grpc.CallOption) (*Assets, error)
	// 还原资源
	RestoreAssets(ctx context.Context, in *DelAssetsReq, opts ...grpc.CallOption) (*Response, error)
	// 清理资源
	ClearAssets(ctx context.Context, in *DelAssetsReq, opts ...grpc.CallOption) (*Response, error)
	// 查看资源数据量
	CountAssets(ctx context.Context, in *CountAssetsReq, opts ...grpc.CallOption) (*CountAssetsResp, error)
	// 获取资源目录下的所有子资源id
	GetAllAssetIds(ctx context.Context, in *GetAllAssetIDsReq, opts ...grpc.CallOption) (*AllAssetIDsRes, error)
	// 查看邀请奖励
	FindUserRewardIntegral(ctx context.Context, in *FindUserRewardIntegralReq, opts ...grpc.CallOption) (*FindUserRewardIntegralResp, error)
	// 保存邀请奖励
	SaveUserReward(ctx context.Context, in *SaveUserRewardReq, opts ...grpc.CallOption) (*Response, error)
	// 领取邀请奖励
	ClaimInviteReward(ctx context.Context, in *ClaimInviteRewardReq, opts ...grpc.CallOption) (*Response, error)
	// 朋友列表
	FindUserInvite(ctx context.Context, in *FindUserInviteReq, opts ...grpc.CallOption) (*FindUserInviteResp, error)
	// 管理端
	// 查询管理端用户
	FindOneByAccountDeletedTime(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*Admin, error)
	FindOneByIdAccountDeletedTime(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*Admin, error)
	// 管理端列表
	FindAdminByIdAccountIsDisableDeletedTime(ctx context.Context, in *AdminReq, opts ...grpc.CallOption) (*QueryAdminRes, error)
	// 保存管理端用户
	SaveAdmin(ctx context.Context, in *Admin, opts ...grpc.CallOption) (*Response, error)
	// 保存管理端用户
	DelAdmin(ctx context.Context, in *DelTaskPoolByIdReq, opts ...grpc.CallOption) (*Response, error)
	// 查询用户信息 返回剩余积分、总空间、剩余空间
	FindUserByNameIsDisable(ctx context.Context, in *QueryUserReq, opts ...grpc.CallOption) (*QueryUserRes, error)
	// 禁用用户
	DisableUser(ctx context.Context, in *DisableUserReq, opts ...grpc.CallOption) (*Response, error)
	// 保存任务池
	SaveTaskPool(ctx context.Context, in *SaveTaskPoolReq, opts ...grpc.CallOption) (*Response, error)
	// 查询任务池
	FindTaskPoolByTaskType(ctx context.Context, in *FindTaskPoolByTaskTypeReq, opts ...grpc.CallOption) (*TaskPoolListResp, error)
	// 删除任务池
	DelTaskPoolById(ctx context.Context, in *DelTaskPoolByIdReq, opts ...grpc.CallOption) (*Response, error)
	// 保存数据字典
	SaveDict(ctx context.Context, in *SaveDictReq, opts ...grpc.CallOption) (*Response, error)
	// 查询数据字典 name And code
	FindDictByName(ctx context.Context, in *FindDictByNameReq, opts ...grpc.CallOption) (*FindDictByNameResp, error)
	// 添加pin消息
	SaveBotPinMsg(ctx context.Context, in *SaveBotPinMsgReq, opts ...grpc.CallOption) (*Response, error)
	// 删除pin消息
	DelBotPinMsg(ctx context.Context, in *DelBotPinMsgReq, opts ...grpc.CallOption) (*Response, error)
	// 查询pin消息
	FindBotPinMsg(ctx context.Context, in *FindBotPinMsgReq, opts ...grpc.CallOption) (*FindBotPinMsgResp, error)
	// 保存bot命令
	SaveBotCommand(ctx context.Context, in *SaveBotCommandReq, opts ...grpc.CallOption) (*Response, error)
	// 查询bot命令
	FindBotCommand(ctx context.Context, in *FindBotCommandReq, opts ...grpc.CallOption) (*FindBotCommandResp, error)
	// 删除bot命令
	DelBotCommand(ctx context.Context, in *DelBotCommandReq, opts ...grpc.CallOption) (*Response, error)
	// 查询bot命令
	FindOneBotCommand(ctx context.Context, in *FindOneBotCommandReq, opts ...grpc.CallOption) (*BotCommandItem, error)
	// 保存传输中资源
	SaveAssetFile(ctx context.Context, in *SaveAssetFileReq, opts ...grpc.CallOption) (*SaveAssetFileResp, error)
	// 修改传输中资源tag,status,cid,link,assetId
	UpdateAssetFile(ctx context.Context, in *UpdateAssetFileReq, opts ...grpc.CallOption) (*UpdateAssetResp, error)
	// 资源传输中删除
	DelAssetFile(ctx context.Context, in *DelAssetFileReq, opts ...grpc.CallOption) (*Response, error)
	// 查看传输中资源
	FindAssetFile(ctx context.Context, in *FindAssetFileReq, opts ...grpc.CallOption) (*FindAssetFileResp, error)
	// 查看传输中资源
	FindOneAssetFile(ctx context.Context, in *FindOneAssetFileReq, opts ...grpc.CallOption) (*AssetFile, error)
	// 保存用户titan token
	SaveUserTitanToken(ctx context.Context, in *SaveUserTitanTokenReq, opts ...grpc.CallOption) (*Response, error)
	// 查询用户titan token
	FindOneUserTitanToken(ctx context.Context, in *FindOneUserTitanTokenReq, opts ...grpc.CallOption) (*UserTitanToken, error)
	// 修改用户titan token
	UpdateUserTitanToken(ctx context.Context, in *UpdateUserTitanTokenReq, opts ...grpc.CallOption) (*Response, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) FindOneByUid(ctx context.Context, in *UidReq, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, User_FindOneByUid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SaveUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_SaveUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_DelUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindUserByPid(ctx context.Context, in *FindUserByPidReq, opts ...grpc.CallOption) (*UserList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserList)
	err := c.cc.Invoke(ctx, User_FindUserByPid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindUser(ctx context.Context, in *QueryUserReq, opts ...grpc.CallOption) (*UserList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserList)
	err := c.cc.Invoke(ctx, User_FindUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindUserByCode(ctx context.Context, in *UserCodeReq, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, User_FindUserByCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CountUserInvite(ctx context.Context, in *CountUserInviteReq, opts ...grpc.CallOption) (*CountUserInviteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountUserInviteResp)
	err := c.cc.Invoke(ctx, User_CountUserInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CountUserByExchangeStorage(ctx context.Context, in *CountUserByExchangeStorageReq, opts ...grpc.CallOption) (*CountUserByExchangeStorageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountUserByExchangeStorageResp)
	err := c.cc.Invoke(ctx, User_CountUserByExchangeStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CheckUserInvite(ctx context.Context, in *CheckUserInviteReq, opts ...grpc.CallOption) (*CheckUserInviteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUserInviteResp)
	err := c.cc.Invoke(ctx, User_CheckUserInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindOneUserPoints(ctx context.Context, in *FindOneUserPointsReq, opts ...grpc.CallOption) (*FindOneUserPointsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindOneUserPointsResp)
	err := c.cc.Invoke(ctx, User_FindOneUserPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindUserPoints(ctx context.Context, in *FindUserPointsReq, opts ...grpc.CallOption) (*FindUserPointsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindUserPointsResp)
	err := c.cc.Invoke(ctx, User_FindUserPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindOneUserStorage(ctx context.Context, in *FindOneUserStorageReq, opts ...grpc.CallOption) (*FindOneUserStorageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindOneUserStorageResp)
	err := c.cc.Invoke(ctx, User_FindOneUserStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindUserStorageExchange(ctx context.Context, in *FindUserStorageExchangeReq, opts ...grpc.CallOption) (*FindUserStorageExchangeRespList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindUserStorageExchangeRespList)
	err := c.cc.Invoke(ctx, User_FindUserStorageExchange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SaveUserPointsAndStorage(ctx context.Context, in *SaveUserPointsAndStorageReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_SaveUserPointsAndStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ReceiveUser(ctx context.Context, in *ReceiveUserReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_ReceiveUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CheckReceive(ctx context.Context, in *ReceiveActionPointsReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_CheckReceive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ReceiveActionPoints(ctx context.Context, in *ReceiveActionPointsReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_ReceiveActionPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CheckIsOldUser(ctx context.Context, in *UidReq, opts ...grpc.CallOption) (*IsOldUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsOldUserResp)
	err := c.cc.Invoke(ctx, User_CheckIsOldUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserStorageAndToken(ctx context.Context, in *UidReq, opts ...grpc.CallOption) (*UserStorageAndToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserStorageAndToken)
	err := c.cc.Invoke(ctx, User_GetUserStorageAndToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SaveUserToken(ctx context.Context, in *SaveUserTokenReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_SaveUserToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SaveMessage(ctx context.Context, in *SaveMessageReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_SaveMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelMessage(ctx context.Context, in *DelMessageReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_DelMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindMessage(ctx context.Context, in *FindMessageReq, opts ...grpc.CallOption) (*FindMessageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindMessageResp)
	err := c.cc.Invoke(ctx, User_FindMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindTask(ctx context.Context, in *FindTaskReq, opts ...grpc.CallOption) (*TaskResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResp)
	err := c.cc.Invoke(ctx, User_FindTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindOneTask(ctx context.Context, in *FindOneTaskReq, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, User_FindOneTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateTask(ctx context.Context, in *UpdateTaskReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_UpdateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SaveTask(ctx context.Context, in *SaveTaskReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_SaveTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SaveShare(ctx context.Context, in *SaveShareReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_SaveShare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateShare(ctx context.Context, in *UpdateShareReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_UpdateShare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindShare(ctx context.Context, in *FindShareReq, opts ...grpc.CallOption) (*FindShareResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindShareResp)
	err := c.cc.Invoke(ctx, User_FindShare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindOneShare(ctx context.Context, in *FindOneShareReq, opts ...grpc.CallOption) (*Share, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Share)
	err := c.cc.Invoke(ctx, User_FindOneShare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelShare(ctx context.Context, in *FindOneShareReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_DelShare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SaveAssets(ctx context.Context, in *SaveAssetsReq, opts ...grpc.CallOption) (*SaveAssetsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveAssetsResp)
	err := c.cc.Invoke(ctx, User_SaveAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateAssetsName(ctx context.Context, in *UpdateAssetsNameReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_UpdateAssetsName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateAssetsMove(ctx context.Context, in *UpdateAssetsMoveReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_UpdateAssetsMove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateAssetsCopy(ctx context.Context, in *UpdateAssetsCopyReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_UpdateAssetsCopy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelAssets(ctx context.Context, in *DelAssetsReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_DelAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindAssets(ctx context.Context, in *FindAssetsReq, opts ...grpc.CallOption) (*FindAssetsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAssetsResp)
	err := c.cc.Invoke(ctx, User_FindAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindAssetsNoDel(ctx context.Context, in *FindAssetsReq, opts ...grpc.CallOption) (*FindAssetsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAssetsResp)
	err := c.cc.Invoke(ctx, User_FindAssetsNoDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindOneAssets(ctx context.Context, in *FindOneAssetsReq, opts ...grpc.CallOption) (*Assets, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Assets)
	err := c.cc.Invoke(ctx, User_FindOneAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RestoreAssets(ctx context.Context, in *DelAssetsReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_RestoreAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ClearAssets(ctx context.Context, in *DelAssetsReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_ClearAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CountAssets(ctx context.Context, in *CountAssetsReq, opts ...grpc.CallOption) (*CountAssetsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountAssetsResp)
	err := c.cc.Invoke(ctx, User_CountAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAllAssetIds(ctx context.Context, in *GetAllAssetIDsReq, opts ...grpc.CallOption) (*AllAssetIDsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllAssetIDsRes)
	err := c.cc.Invoke(ctx, User_GetAllAssetIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindUserRewardIntegral(ctx context.Context, in *FindUserRewardIntegralReq, opts ...grpc.CallOption) (*FindUserRewardIntegralResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindUserRewardIntegralResp)
	err := c.cc.Invoke(ctx, User_FindUserRewardIntegral_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SaveUserReward(ctx context.Context, in *SaveUserRewardReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_SaveUserReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ClaimInviteReward(ctx context.Context, in *ClaimInviteRewardReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_ClaimInviteReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindUserInvite(ctx context.Context, in *FindUserInviteReq, opts ...grpc.CallOption) (*FindUserInviteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindUserInviteResp)
	err := c.cc.Invoke(ctx, User_FindUserInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindOneByAccountDeletedTime(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*Admin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Admin)
	err := c.cc.Invoke(ctx, User_FindOneByAccountDeletedTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindOneByIdAccountDeletedTime(ctx context.Context, in *AccountReq, opts ...grpc.CallOption) (*Admin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Admin)
	err := c.cc.Invoke(ctx, User_FindOneByIdAccountDeletedTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindAdminByIdAccountIsDisableDeletedTime(ctx context.Context, in *AdminReq, opts ...grpc.CallOption) (*QueryAdminRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAdminRes)
	err := c.cc.Invoke(ctx, User_FindAdminByIdAccountIsDisableDeletedTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SaveAdmin(ctx context.Context, in *Admin, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_SaveAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelAdmin(ctx context.Context, in *DelTaskPoolByIdReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_DelAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindUserByNameIsDisable(ctx context.Context, in *QueryUserReq, opts ...grpc.CallOption) (*QueryUserRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryUserRes)
	err := c.cc.Invoke(ctx, User_FindUserByNameIsDisable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DisableUser(ctx context.Context, in *DisableUserReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_DisableUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SaveTaskPool(ctx context.Context, in *SaveTaskPoolReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_SaveTaskPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindTaskPoolByTaskType(ctx context.Context, in *FindTaskPoolByTaskTypeReq, opts ...grpc.CallOption) (*TaskPoolListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskPoolListResp)
	err := c.cc.Invoke(ctx, User_FindTaskPoolByTaskType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelTaskPoolById(ctx context.Context, in *DelTaskPoolByIdReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_DelTaskPoolById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SaveDict(ctx context.Context, in *SaveDictReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_SaveDict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindDictByName(ctx context.Context, in *FindDictByNameReq, opts ...grpc.CallOption) (*FindDictByNameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindDictByNameResp)
	err := c.cc.Invoke(ctx, User_FindDictByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SaveBotPinMsg(ctx context.Context, in *SaveBotPinMsgReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_SaveBotPinMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelBotPinMsg(ctx context.Context, in *DelBotPinMsgReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_DelBotPinMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindBotPinMsg(ctx context.Context, in *FindBotPinMsgReq, opts ...grpc.CallOption) (*FindBotPinMsgResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindBotPinMsgResp)
	err := c.cc.Invoke(ctx, User_FindBotPinMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SaveBotCommand(ctx context.Context, in *SaveBotCommandReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_SaveBotCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindBotCommand(ctx context.Context, in *FindBotCommandReq, opts ...grpc.CallOption) (*FindBotCommandResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindBotCommandResp)
	err := c.cc.Invoke(ctx, User_FindBotCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelBotCommand(ctx context.Context, in *DelBotCommandReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_DelBotCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindOneBotCommand(ctx context.Context, in *FindOneBotCommandReq, opts ...grpc.CallOption) (*BotCommandItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BotCommandItem)
	err := c.cc.Invoke(ctx, User_FindOneBotCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SaveAssetFile(ctx context.Context, in *SaveAssetFileReq, opts ...grpc.CallOption) (*SaveAssetFileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveAssetFileResp)
	err := c.cc.Invoke(ctx, User_SaveAssetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateAssetFile(ctx context.Context, in *UpdateAssetFileReq, opts ...grpc.CallOption) (*UpdateAssetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAssetResp)
	err := c.cc.Invoke(ctx, User_UpdateAssetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelAssetFile(ctx context.Context, in *DelAssetFileReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_DelAssetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindAssetFile(ctx context.Context, in *FindAssetFileReq, opts ...grpc.CallOption) (*FindAssetFileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAssetFileResp)
	err := c.cc.Invoke(ctx, User_FindAssetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindOneAssetFile(ctx context.Context, in *FindOneAssetFileReq, opts ...grpc.CallOption) (*AssetFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssetFile)
	err := c.cc.Invoke(ctx, User_FindOneAssetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SaveUserTitanToken(ctx context.Context, in *SaveUserTitanTokenReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_SaveUserTitanToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) FindOneUserTitanToken(ctx context.Context, in *FindOneUserTitanTokenReq, opts ...grpc.CallOption) (*UserTitanToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserTitanToken)
	err := c.cc.Invoke(ctx, User_FindOneUserTitanToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserTitanToken(ctx context.Context, in *UpdateUserTitanTokenReq, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, User_UpdateUserTitanToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// 用户端
	FindOneByUid(context.Context, *UidReq) (*User, error)
	// 保存用户
	SaveUser(context.Context, *User) (*Response, error)
	// 删除用户
	DelUser(context.Context, *DelUserReq) (*Response, error)
	// 查询推荐用户
	FindUserByPid(context.Context, *FindUserByPidReq) (*UserList, error)
	FindUser(context.Context, *QueryUserReq) (*UserList, error)
	// 根据用户邀请码查询用户
	FindUserByCode(context.Context, *UserCodeReq) (*User, error)
	// 查询用戶邀請數量
	CountUserInvite(context.Context, *CountUserInviteReq) (*CountUserInviteResp, error)
	// 查询奖励空间总数
	CountUserByExchangeStorage(context.Context, *CountUserByExchangeStorageReq) (*CountUserByExchangeStorageResp, error)
	// 校验用户是否邀请过
	CheckUserInvite(context.Context, *CheckUserInviteReq) (*CheckUserInviteResp, error)
	// 用户积分
	FindOneUserPoints(context.Context, *FindOneUserPointsReq) (*FindOneUserPointsResp, error)
	FindUserPoints(context.Context, *FindUserPointsReq) (*FindUserPointsResp, error)
	// 用户存储空间
	FindOneUserStorage(context.Context, *FindOneUserStorageReq) (*FindOneUserStorageResp, error)
	// 用户空间兑换列表
	FindUserStorageExchange(context.Context, *FindUserStorageExchangeReq) (*FindUserStorageExchangeRespList, error)
	// 保存用户积分和空间
	SaveUserPointsAndStorage(context.Context, *SaveUserPointsAndStorageReq) (*Response, error)
	// 领取用户奖励空间
	ReceiveUser(context.Context, *ReceiveUserReq) (*Response, error)
	// 校验是否满足领取条件
	CheckReceive(context.Context, *ReceiveActionPointsReq) (*Response, error)
	// 用户领取活动积分
	ReceiveActionPoints(context.Context, *ReceiveActionPointsReq) (*Response, error)
	CheckIsOldUser(context.Context, *UidReq) (*IsOldUserResp, error)
	// 用户预订空投
	GetUserStorageAndToken(context.Context, *UidReq) (*UserStorageAndToken, error)
	SaveUserToken(context.Context, *SaveUserTokenReq) (*Response, error)
	// 发送消息
	SaveMessage(context.Context, *SaveMessageReq) (*Response, error)
	// 删除消息
	DelMessage(context.Context, *DelMessageReq) (*Response, error)
	// 查询消息
	FindMessage(context.Context, *FindMessageReq) (*FindMessageResp, error)
	// 查询用户任务列表
	FindTask(context.Context, *FindTaskReq) (*TaskResp, error)
	FindOneTask(context.Context, *FindOneTaskReq) (*Task, error)
	// 修改任务完成状态
	UpdateTask(context.Context, *UpdateTaskReq) (*Response, error)
	SaveTask(context.Context, *SaveTaskReq) (*Response, error)
	// 保存分享资源
	SaveShare(context.Context, *SaveShareReq) (*Response, error)
	// 修改分享资源密码和有效期
	UpdateShare(context.Context, *UpdateShareReq) (*Response, error)
	// 查看分享资源
	FindShare(context.Context, *FindShareReq) (*FindShareResp, error)
	// 查看分享资源
	FindOneShare(context.Context, *FindOneShareReq) (*Share, error)
	// 删除分享资源
	DelShare(context.Context, *FindOneShareReq) (*Response, error)
	// 保存资源
	SaveAssets(context.Context, *SaveAssetsReq) (*SaveAssetsResp, error)
	// 修改资源name,*tag,status,cid,link
	UpdateAssetsName(context.Context, *UpdateAssetsNameReq) (*Response, error)
	// 资源移动
	UpdateAssetsMove(context.Context, *UpdateAssetsMoveReq) (*Response, error)
	// 资源复制
	UpdateAssetsCopy(context.Context, *UpdateAssetsCopyReq) (*Response, error)
	// 资源删除
	DelAssets(context.Context, *DelAssetsReq) (*Response, error)
	// 查看资源
	FindAssets(context.Context, *FindAssetsReq) (*FindAssetsResp, error)
	FindAssetsNoDel(context.Context, *FindAssetsReq) (*FindAssetsResp, error)
	// 查看资源
	FindOneAssets(context.Context, *FindOneAssetsReq) (*Assets, error)
	// 还原资源
	RestoreAssets(context.Context, *DelAssetsReq) (*Response, error)
	// 清理资源
	ClearAssets(context.Context, *DelAssetsReq) (*Response, error)
	// 查看资源数据量
	CountAssets(context.Context, *CountAssetsReq) (*CountAssetsResp, error)
	// 获取资源目录下的所有子资源id
	GetAllAssetIds(context.Context, *GetAllAssetIDsReq) (*AllAssetIDsRes, error)
	// 查看邀请奖励
	FindUserRewardIntegral(context.Context, *FindUserRewardIntegralReq) (*FindUserRewardIntegralResp, error)
	// 保存邀请奖励
	SaveUserReward(context.Context, *SaveUserRewardReq) (*Response, error)
	// 领取邀请奖励
	ClaimInviteReward(context.Context, *ClaimInviteRewardReq) (*Response, error)
	// 朋友列表
	FindUserInvite(context.Context, *FindUserInviteReq) (*FindUserInviteResp, error)
	// 管理端
	// 查询管理端用户
	FindOneByAccountDeletedTime(context.Context, *AccountReq) (*Admin, error)
	FindOneByIdAccountDeletedTime(context.Context, *AccountReq) (*Admin, error)
	// 管理端列表
	FindAdminByIdAccountIsDisableDeletedTime(context.Context, *AdminReq) (*QueryAdminRes, error)
	// 保存管理端用户
	SaveAdmin(context.Context, *Admin) (*Response, error)
	// 保存管理端用户
	DelAdmin(context.Context, *DelTaskPoolByIdReq) (*Response, error)
	// 查询用户信息 返回剩余积分、总空间、剩余空间
	FindUserByNameIsDisable(context.Context, *QueryUserReq) (*QueryUserRes, error)
	// 禁用用户
	DisableUser(context.Context, *DisableUserReq) (*Response, error)
	// 保存任务池
	SaveTaskPool(context.Context, *SaveTaskPoolReq) (*Response, error)
	// 查询任务池
	FindTaskPoolByTaskType(context.Context, *FindTaskPoolByTaskTypeReq) (*TaskPoolListResp, error)
	// 删除任务池
	DelTaskPoolById(context.Context, *DelTaskPoolByIdReq) (*Response, error)
	// 保存数据字典
	SaveDict(context.Context, *SaveDictReq) (*Response, error)
	// 查询数据字典 name And code
	FindDictByName(context.Context, *FindDictByNameReq) (*FindDictByNameResp, error)
	// 添加pin消息
	SaveBotPinMsg(context.Context, *SaveBotPinMsgReq) (*Response, error)
	// 删除pin消息
	DelBotPinMsg(context.Context, *DelBotPinMsgReq) (*Response, error)
	// 查询pin消息
	FindBotPinMsg(context.Context, *FindBotPinMsgReq) (*FindBotPinMsgResp, error)
	// 保存bot命令
	SaveBotCommand(context.Context, *SaveBotCommandReq) (*Response, error)
	// 查询bot命令
	FindBotCommand(context.Context, *FindBotCommandReq) (*FindBotCommandResp, error)
	// 删除bot命令
	DelBotCommand(context.Context, *DelBotCommandReq) (*Response, error)
	// 查询bot命令
	FindOneBotCommand(context.Context, *FindOneBotCommandReq) (*BotCommandItem, error)
	// 保存传输中资源
	SaveAssetFile(context.Context, *SaveAssetFileReq) (*SaveAssetFileResp, error)
	// 修改传输中资源tag,status,cid,link,assetId
	UpdateAssetFile(context.Context, *UpdateAssetFileReq) (*UpdateAssetResp, error)
	// 资源传输中删除
	DelAssetFile(context.Context, *DelAssetFileReq) (*Response, error)
	// 查看传输中资源
	FindAssetFile(context.Context, *FindAssetFileReq) (*FindAssetFileResp, error)
	// 查看传输中资源
	FindOneAssetFile(context.Context, *FindOneAssetFileReq) (*AssetFile, error)
	// 保存用户titan token
	SaveUserTitanToken(context.Context, *SaveUserTitanTokenReq) (*Response, error)
	// 查询用户titan token
	FindOneUserTitanToken(context.Context, *FindOneUserTitanTokenReq) (*UserTitanToken, error)
	// 修改用户titan token
	UpdateUserTitanToken(context.Context, *UpdateUserTitanTokenReq) (*Response, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) FindOneByUid(context.Context, *UidReq) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneByUid not implemented")
}
func (UnimplementedUserServer) SaveUser(context.Context, *User) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUser not implemented")
}
func (UnimplementedUserServer) DelUser(context.Context, *DelUserReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUser not implemented")
}
func (UnimplementedUserServer) FindUserByPid(context.Context, *FindUserByPidReq) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByPid not implemented")
}
func (UnimplementedUserServer) FindUser(context.Context, *QueryUserReq) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUser not implemented")
}
func (UnimplementedUserServer) FindUserByCode(context.Context, *UserCodeReq) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByCode not implemented")
}
func (UnimplementedUserServer) CountUserInvite(context.Context, *CountUserInviteReq) (*CountUserInviteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountUserInvite not implemented")
}
func (UnimplementedUserServer) CountUserByExchangeStorage(context.Context, *CountUserByExchangeStorageReq) (*CountUserByExchangeStorageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountUserByExchangeStorage not implemented")
}
func (UnimplementedUserServer) CheckUserInvite(context.Context, *CheckUserInviteReq) (*CheckUserInviteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserInvite not implemented")
}
func (UnimplementedUserServer) FindOneUserPoints(context.Context, *FindOneUserPointsReq) (*FindOneUserPointsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneUserPoints not implemented")
}
func (UnimplementedUserServer) FindUserPoints(context.Context, *FindUserPointsReq) (*FindUserPointsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserPoints not implemented")
}
func (UnimplementedUserServer) FindOneUserStorage(context.Context, *FindOneUserStorageReq) (*FindOneUserStorageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneUserStorage not implemented")
}
func (UnimplementedUserServer) FindUserStorageExchange(context.Context, *FindUserStorageExchangeReq) (*FindUserStorageExchangeRespList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserStorageExchange not implemented")
}
func (UnimplementedUserServer) SaveUserPointsAndStorage(context.Context, *SaveUserPointsAndStorageReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserPointsAndStorage not implemented")
}
func (UnimplementedUserServer) ReceiveUser(context.Context, *ReceiveUserReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveUser not implemented")
}
func (UnimplementedUserServer) CheckReceive(context.Context, *ReceiveActionPointsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckReceive not implemented")
}
func (UnimplementedUserServer) ReceiveActionPoints(context.Context, *ReceiveActionPointsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveActionPoints not implemented")
}
func (UnimplementedUserServer) CheckIsOldUser(context.Context, *UidReq) (*IsOldUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsOldUser not implemented")
}
func (UnimplementedUserServer) GetUserStorageAndToken(context.Context, *UidReq) (*UserStorageAndToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStorageAndToken not implemented")
}
func (UnimplementedUserServer) SaveUserToken(context.Context, *SaveUserTokenReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserToken not implemented")
}
func (UnimplementedUserServer) SaveMessage(context.Context, *SaveMessageReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMessage not implemented")
}
func (UnimplementedUserServer) DelMessage(context.Context, *DelMessageReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMessage not implemented")
}
func (UnimplementedUserServer) FindMessage(context.Context, *FindMessageReq) (*FindMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMessage not implemented")
}
func (UnimplementedUserServer) FindTask(context.Context, *FindTaskReq) (*TaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTask not implemented")
}
func (UnimplementedUserServer) FindOneTask(context.Context, *FindOneTaskReq) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneTask not implemented")
}
func (UnimplementedUserServer) UpdateTask(context.Context, *UpdateTaskReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedUserServer) SaveTask(context.Context, *SaveTaskReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTask not implemented")
}
func (UnimplementedUserServer) SaveShare(context.Context, *SaveShareReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveShare not implemented")
}
func (UnimplementedUserServer) UpdateShare(context.Context, *UpdateShareReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShare not implemented")
}
func (UnimplementedUserServer) FindShare(context.Context, *FindShareReq) (*FindShareResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindShare not implemented")
}
func (UnimplementedUserServer) FindOneShare(context.Context, *FindOneShareReq) (*Share, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneShare not implemented")
}
func (UnimplementedUserServer) DelShare(context.Context, *FindOneShareReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelShare not implemented")
}
func (UnimplementedUserServer) SaveAssets(context.Context, *SaveAssetsReq) (*SaveAssetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAssets not implemented")
}
func (UnimplementedUserServer) UpdateAssetsName(context.Context, *UpdateAssetsNameReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssetsName not implemented")
}
func (UnimplementedUserServer) UpdateAssetsMove(context.Context, *UpdateAssetsMoveReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssetsMove not implemented")
}
func (UnimplementedUserServer) UpdateAssetsCopy(context.Context, *UpdateAssetsCopyReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssetsCopy not implemented")
}
func (UnimplementedUserServer) DelAssets(context.Context, *DelAssetsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAssets not implemented")
}
func (UnimplementedUserServer) FindAssets(context.Context, *FindAssetsReq) (*FindAssetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAssets not implemented")
}
func (UnimplementedUserServer) FindAssetsNoDel(context.Context, *FindAssetsReq) (*FindAssetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAssetsNoDel not implemented")
}
func (UnimplementedUserServer) FindOneAssets(context.Context, *FindOneAssetsReq) (*Assets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneAssets not implemented")
}
func (UnimplementedUserServer) RestoreAssets(context.Context, *DelAssetsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreAssets not implemented")
}
func (UnimplementedUserServer) ClearAssets(context.Context, *DelAssetsReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearAssets not implemented")
}
func (UnimplementedUserServer) CountAssets(context.Context, *CountAssetsReq) (*CountAssetsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAssets not implemented")
}
func (UnimplementedUserServer) GetAllAssetIds(context.Context, *GetAllAssetIDsReq) (*AllAssetIDsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAssetIds not implemented")
}
func (UnimplementedUserServer) FindUserRewardIntegral(context.Context, *FindUserRewardIntegralReq) (*FindUserRewardIntegralResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserRewardIntegral not implemented")
}
func (UnimplementedUserServer) SaveUserReward(context.Context, *SaveUserRewardReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserReward not implemented")
}
func (UnimplementedUserServer) ClaimInviteReward(context.Context, *ClaimInviteRewardReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimInviteReward not implemented")
}
func (UnimplementedUserServer) FindUserInvite(context.Context, *FindUserInviteReq) (*FindUserInviteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserInvite not implemented")
}
func (UnimplementedUserServer) FindOneByAccountDeletedTime(context.Context, *AccountReq) (*Admin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneByAccountDeletedTime not implemented")
}
func (UnimplementedUserServer) FindOneByIdAccountDeletedTime(context.Context, *AccountReq) (*Admin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneByIdAccountDeletedTime not implemented")
}
func (UnimplementedUserServer) FindAdminByIdAccountIsDisableDeletedTime(context.Context, *AdminReq) (*QueryAdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAdminByIdAccountIsDisableDeletedTime not implemented")
}
func (UnimplementedUserServer) SaveAdmin(context.Context, *Admin) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAdmin not implemented")
}
func (UnimplementedUserServer) DelAdmin(context.Context, *DelTaskPoolByIdReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAdmin not implemented")
}
func (UnimplementedUserServer) FindUserByNameIsDisable(context.Context, *QueryUserReq) (*QueryUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByNameIsDisable not implemented")
}
func (UnimplementedUserServer) DisableUser(context.Context, *DisableUserReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableUser not implemented")
}
func (UnimplementedUserServer) SaveTaskPool(context.Context, *SaveTaskPoolReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTaskPool not implemented")
}
func (UnimplementedUserServer) FindTaskPoolByTaskType(context.Context, *FindTaskPoolByTaskTypeReq) (*TaskPoolListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTaskPoolByTaskType not implemented")
}
func (UnimplementedUserServer) DelTaskPoolById(context.Context, *DelTaskPoolByIdReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTaskPoolById not implemented")
}
func (UnimplementedUserServer) SaveDict(context.Context, *SaveDictReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDict not implemented")
}
func (UnimplementedUserServer) FindDictByName(context.Context, *FindDictByNameReq) (*FindDictByNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDictByName not implemented")
}
func (UnimplementedUserServer) SaveBotPinMsg(context.Context, *SaveBotPinMsgReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBotPinMsg not implemented")
}
func (UnimplementedUserServer) DelBotPinMsg(context.Context, *DelBotPinMsgReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBotPinMsg not implemented")
}
func (UnimplementedUserServer) FindBotPinMsg(context.Context, *FindBotPinMsgReq) (*FindBotPinMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBotPinMsg not implemented")
}
func (UnimplementedUserServer) SaveBotCommand(context.Context, *SaveBotCommandReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBotCommand not implemented")
}
func (UnimplementedUserServer) FindBotCommand(context.Context, *FindBotCommandReq) (*FindBotCommandResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBotCommand not implemented")
}
func (UnimplementedUserServer) DelBotCommand(context.Context, *DelBotCommandReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBotCommand not implemented")
}
func (UnimplementedUserServer) FindOneBotCommand(context.Context, *FindOneBotCommandReq) (*BotCommandItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneBotCommand not implemented")
}
func (UnimplementedUserServer) SaveAssetFile(context.Context, *SaveAssetFileReq) (*SaveAssetFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAssetFile not implemented")
}
func (UnimplementedUserServer) UpdateAssetFile(context.Context, *UpdateAssetFileReq) (*UpdateAssetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssetFile not implemented")
}
func (UnimplementedUserServer) DelAssetFile(context.Context, *DelAssetFileReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAssetFile not implemented")
}
func (UnimplementedUserServer) FindAssetFile(context.Context, *FindAssetFileReq) (*FindAssetFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAssetFile not implemented")
}
func (UnimplementedUserServer) FindOneAssetFile(context.Context, *FindOneAssetFileReq) (*AssetFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneAssetFile not implemented")
}
func (UnimplementedUserServer) SaveUserTitanToken(context.Context, *SaveUserTitanTokenReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserTitanToken not implemented")
}
func (UnimplementedUserServer) FindOneUserTitanToken(context.Context, *FindOneUserTitanTokenReq) (*UserTitanToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneUserTitanToken not implemented")
}
func (UnimplementedUserServer) UpdateUserTitanToken(context.Context, *UpdateUserTitanTokenReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserTitanToken not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_FindOneByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindOneByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindOneByUid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindOneByUid(ctx, req.(*UidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SaveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SaveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SaveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SaveUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelUser(ctx, req.(*DelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindUserByPid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByPidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindUserByPid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindUserByPid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindUserByPid(ctx, req.(*FindUserByPidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindUser(ctx, req.(*QueryUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindUserByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindUserByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindUserByCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindUserByCode(ctx, req.(*UserCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CountUserInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountUserInviteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CountUserInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CountUserInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CountUserInvite(ctx, req.(*CountUserInviteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CountUserByExchangeStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountUserByExchangeStorageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CountUserByExchangeStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CountUserByExchangeStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CountUserByExchangeStorage(ctx, req.(*CountUserByExchangeStorageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CheckUserInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserInviteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckUserInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CheckUserInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckUserInvite(ctx, req.(*CheckUserInviteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindOneUserPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneUserPointsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindOneUserPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindOneUserPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindOneUserPoints(ctx, req.(*FindOneUserPointsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindUserPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserPointsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindUserPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindUserPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindUserPoints(ctx, req.(*FindUserPointsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindOneUserStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneUserStorageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindOneUserStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindOneUserStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindOneUserStorage(ctx, req.(*FindOneUserStorageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindUserStorageExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserStorageExchangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindUserStorageExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindUserStorageExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindUserStorageExchange(ctx, req.(*FindUserStorageExchangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SaveUserPointsAndStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUserPointsAndStorageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SaveUserPointsAndStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SaveUserPointsAndStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SaveUserPointsAndStorage(ctx, req.(*SaveUserPointsAndStorageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ReceiveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ReceiveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ReceiveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ReceiveUser(ctx, req.(*ReceiveUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CheckReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveActionPointsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CheckReceive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckReceive(ctx, req.(*ReceiveActionPointsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ReceiveActionPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveActionPointsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ReceiveActionPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ReceiveActionPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ReceiveActionPoints(ctx, req.(*ReceiveActionPointsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CheckIsOldUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckIsOldUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CheckIsOldUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckIsOldUser(ctx, req.(*UidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserStorageAndToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserStorageAndToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserStorageAndToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserStorageAndToken(ctx, req.(*UidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SaveUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUserTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SaveUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SaveUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SaveUserToken(ctx, req.(*SaveUserTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SaveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SaveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SaveMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SaveMessage(ctx, req.(*SaveMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelMessage(ctx, req.(*DelMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindMessage(ctx, req.(*FindMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindTask(ctx, req.(*FindTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindOneTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindOneTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindOneTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindOneTask(ctx, req.(*FindOneTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateTask(ctx, req.(*UpdateTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SaveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SaveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SaveTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SaveTask(ctx, req.(*SaveTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SaveShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SaveShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SaveShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SaveShare(ctx, req.(*SaveShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateShare(ctx, req.(*UpdateShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindShare(ctx, req.(*FindShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindOneShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindOneShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindOneShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindOneShare(ctx, req.(*FindOneShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelShare(ctx, req.(*FindOneShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SaveAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAssetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SaveAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SaveAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SaveAssets(ctx, req.(*SaveAssetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateAssetsName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetsNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateAssetsName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateAssetsName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateAssetsName(ctx, req.(*UpdateAssetsNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateAssetsMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetsMoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateAssetsMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateAssetsMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateAssetsMove(ctx, req.(*UpdateAssetsMoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateAssetsCopy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetsCopyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateAssetsCopy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateAssetsCopy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateAssetsCopy(ctx, req.(*UpdateAssetsCopyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAssetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelAssets(ctx, req.(*DelAssetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAssetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindAssets(ctx, req.(*FindAssetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindAssetsNoDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAssetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindAssetsNoDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindAssetsNoDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindAssetsNoDel(ctx, req.(*FindAssetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindOneAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneAssetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindOneAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindOneAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindOneAssets(ctx, req.(*FindOneAssetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RestoreAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAssetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RestoreAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_RestoreAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RestoreAssets(ctx, req.(*DelAssetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ClearAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAssetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ClearAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ClearAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ClearAssets(ctx, req.(*DelAssetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CountAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAssetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CountAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CountAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CountAssets(ctx, req.(*CountAssetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAllAssetIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAssetIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAllAssetIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetAllAssetIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAllAssetIds(ctx, req.(*GetAllAssetIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindUserRewardIntegral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserRewardIntegralReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindUserRewardIntegral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindUserRewardIntegral_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindUserRewardIntegral(ctx, req.(*FindUserRewardIntegralReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SaveUserReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUserRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SaveUserReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SaveUserReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SaveUserReward(ctx, req.(*SaveUserRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ClaimInviteReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimInviteRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ClaimInviteReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ClaimInviteReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ClaimInviteReward(ctx, req.(*ClaimInviteRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindUserInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserInviteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindUserInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindUserInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindUserInvite(ctx, req.(*FindUserInviteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindOneByAccountDeletedTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindOneByAccountDeletedTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindOneByAccountDeletedTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindOneByAccountDeletedTime(ctx, req.(*AccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindOneByIdAccountDeletedTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindOneByIdAccountDeletedTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindOneByIdAccountDeletedTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindOneByIdAccountDeletedTime(ctx, req.(*AccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindAdminByIdAccountIsDisableDeletedTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindAdminByIdAccountIsDisableDeletedTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindAdminByIdAccountIsDisableDeletedTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindAdminByIdAccountIsDisableDeletedTime(ctx, req.(*AdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SaveAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Admin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SaveAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SaveAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SaveAdmin(ctx, req.(*Admin))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTaskPoolByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelAdmin(ctx, req.(*DelTaskPoolByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindUserByNameIsDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindUserByNameIsDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindUserByNameIsDisable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindUserByNameIsDisable(ctx, req.(*QueryUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DisableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DisableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DisableUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DisableUser(ctx, req.(*DisableUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SaveTaskPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTaskPoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SaveTaskPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SaveTaskPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SaveTaskPool(ctx, req.(*SaveTaskPoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindTaskPoolByTaskType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTaskPoolByTaskTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindTaskPoolByTaskType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindTaskPoolByTaskType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindTaskPoolByTaskType(ctx, req.(*FindTaskPoolByTaskTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelTaskPoolById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTaskPoolByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelTaskPoolById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelTaskPoolById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelTaskPoolById(ctx, req.(*DelTaskPoolByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SaveDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SaveDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SaveDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SaveDict(ctx, req.(*SaveDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindDictByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDictByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindDictByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindDictByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindDictByName(ctx, req.(*FindDictByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SaveBotPinMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBotPinMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SaveBotPinMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SaveBotPinMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SaveBotPinMsg(ctx, req.(*SaveBotPinMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelBotPinMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBotPinMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelBotPinMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelBotPinMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelBotPinMsg(ctx, req.(*DelBotPinMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindBotPinMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindBotPinMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindBotPinMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindBotPinMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindBotPinMsg(ctx, req.(*FindBotPinMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SaveBotCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBotCommandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SaveBotCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SaveBotCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SaveBotCommand(ctx, req.(*SaveBotCommandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindBotCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindBotCommandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindBotCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindBotCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindBotCommand(ctx, req.(*FindBotCommandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelBotCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBotCommandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelBotCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelBotCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelBotCommand(ctx, req.(*DelBotCommandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindOneBotCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneBotCommandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindOneBotCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindOneBotCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindOneBotCommand(ctx, req.(*FindOneBotCommandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SaveAssetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAssetFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SaveAssetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SaveAssetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SaveAssetFile(ctx, req.(*SaveAssetFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateAssetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateAssetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateAssetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateAssetFile(ctx, req.(*UpdateAssetFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelAssetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAssetFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelAssetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelAssetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelAssetFile(ctx, req.(*DelAssetFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindAssetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAssetFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindAssetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindAssetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindAssetFile(ctx, req.(*FindAssetFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindOneAssetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneAssetFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindOneAssetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindOneAssetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindOneAssetFile(ctx, req.(*FindOneAssetFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SaveUserTitanToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUserTitanTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SaveUserTitanToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SaveUserTitanToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SaveUserTitanToken(ctx, req.(*SaveUserTitanTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_FindOneUserTitanToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneUserTitanTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).FindOneUserTitanToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_FindOneUserTitanToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).FindOneUserTitanToken(ctx, req.(*FindOneUserTitanTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserTitanToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserTitanTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserTitanToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateUserTitanToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserTitanToken(ctx, req.(*UpdateUserTitanTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindOneByUid",
			Handler:    _User_FindOneByUid_Handler,
		},
		{
			MethodName: "SaveUser",
			Handler:    _User_SaveUser_Handler,
		},
		{
			MethodName: "DelUser",
			Handler:    _User_DelUser_Handler,
		},
		{
			MethodName: "FindUserByPid",
			Handler:    _User_FindUserByPid_Handler,
		},
		{
			MethodName: "FindUser",
			Handler:    _User_FindUser_Handler,
		},
		{
			MethodName: "FindUserByCode",
			Handler:    _User_FindUserByCode_Handler,
		},
		{
			MethodName: "CountUserInvite",
			Handler:    _User_CountUserInvite_Handler,
		},
		{
			MethodName: "CountUserByExchangeStorage",
			Handler:    _User_CountUserByExchangeStorage_Handler,
		},
		{
			MethodName: "CheckUserInvite",
			Handler:    _User_CheckUserInvite_Handler,
		},
		{
			MethodName: "FindOneUserPoints",
			Handler:    _User_FindOneUserPoints_Handler,
		},
		{
			MethodName: "FindUserPoints",
			Handler:    _User_FindUserPoints_Handler,
		},
		{
			MethodName: "FindOneUserStorage",
			Handler:    _User_FindOneUserStorage_Handler,
		},
		{
			MethodName: "FindUserStorageExchange",
			Handler:    _User_FindUserStorageExchange_Handler,
		},
		{
			MethodName: "SaveUserPointsAndStorage",
			Handler:    _User_SaveUserPointsAndStorage_Handler,
		},
		{
			MethodName: "ReceiveUser",
			Handler:    _User_ReceiveUser_Handler,
		},
		{
			MethodName: "CheckReceive",
			Handler:    _User_CheckReceive_Handler,
		},
		{
			MethodName: "ReceiveActionPoints",
			Handler:    _User_ReceiveActionPoints_Handler,
		},
		{
			MethodName: "CheckIsOldUser",
			Handler:    _User_CheckIsOldUser_Handler,
		},
		{
			MethodName: "GetUserStorageAndToken",
			Handler:    _User_GetUserStorageAndToken_Handler,
		},
		{
			MethodName: "SaveUserToken",
			Handler:    _User_SaveUserToken_Handler,
		},
		{
			MethodName: "SaveMessage",
			Handler:    _User_SaveMessage_Handler,
		},
		{
			MethodName: "DelMessage",
			Handler:    _User_DelMessage_Handler,
		},
		{
			MethodName: "FindMessage",
			Handler:    _User_FindMessage_Handler,
		},
		{
			MethodName: "FindTask",
			Handler:    _User_FindTask_Handler,
		},
		{
			MethodName: "FindOneTask",
			Handler:    _User_FindOneTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _User_UpdateTask_Handler,
		},
		{
			MethodName: "SaveTask",
			Handler:    _User_SaveTask_Handler,
		},
		{
			MethodName: "SaveShare",
			Handler:    _User_SaveShare_Handler,
		},
		{
			MethodName: "UpdateShare",
			Handler:    _User_UpdateShare_Handler,
		},
		{
			MethodName: "FindShare",
			Handler:    _User_FindShare_Handler,
		},
		{
			MethodName: "FindOneShare",
			Handler:    _User_FindOneShare_Handler,
		},
		{
			MethodName: "DelShare",
			Handler:    _User_DelShare_Handler,
		},
		{
			MethodName: "SaveAssets",
			Handler:    _User_SaveAssets_Handler,
		},
		{
			MethodName: "UpdateAssetsName",
			Handler:    _User_UpdateAssetsName_Handler,
		},
		{
			MethodName: "UpdateAssetsMove",
			Handler:    _User_UpdateAssetsMove_Handler,
		},
		{
			MethodName: "UpdateAssetsCopy",
			Handler:    _User_UpdateAssetsCopy_Handler,
		},
		{
			MethodName: "DelAssets",
			Handler:    _User_DelAssets_Handler,
		},
		{
			MethodName: "FindAssets",
			Handler:    _User_FindAssets_Handler,
		},
		{
			MethodName: "FindAssetsNoDel",
			Handler:    _User_FindAssetsNoDel_Handler,
		},
		{
			MethodName: "FindOneAssets",
			Handler:    _User_FindOneAssets_Handler,
		},
		{
			MethodName: "RestoreAssets",
			Handler:    _User_RestoreAssets_Handler,
		},
		{
			MethodName: "ClearAssets",
			Handler:    _User_ClearAssets_Handler,
		},
		{
			MethodName: "CountAssets",
			Handler:    _User_CountAssets_Handler,
		},
		{
			MethodName: "GetAllAssetIds",
			Handler:    _User_GetAllAssetIds_Handler,
		},
		{
			MethodName: "FindUserRewardIntegral",
			Handler:    _User_FindUserRewardIntegral_Handler,
		},
		{
			MethodName: "SaveUserReward",
			Handler:    _User_SaveUserReward_Handler,
		},
		{
			MethodName: "ClaimInviteReward",
			Handler:    _User_ClaimInviteReward_Handler,
		},
		{
			MethodName: "FindUserInvite",
			Handler:    _User_FindUserInvite_Handler,
		},
		{
			MethodName: "FindOneByAccountDeletedTime",
			Handler:    _User_FindOneByAccountDeletedTime_Handler,
		},
		{
			MethodName: "FindOneByIdAccountDeletedTime",
			Handler:    _User_FindOneByIdAccountDeletedTime_Handler,
		},
		{
			MethodName: "FindAdminByIdAccountIsDisableDeletedTime",
			Handler:    _User_FindAdminByIdAccountIsDisableDeletedTime_Handler,
		},
		{
			MethodName: "SaveAdmin",
			Handler:    _User_SaveAdmin_Handler,
		},
		{
			MethodName: "DelAdmin",
			Handler:    _User_DelAdmin_Handler,
		},
		{
			MethodName: "FindUserByNameIsDisable",
			Handler:    _User_FindUserByNameIsDisable_Handler,
		},
		{
			MethodName: "DisableUser",
			Handler:    _User_DisableUser_Handler,
		},
		{
			MethodName: "SaveTaskPool",
			Handler:    _User_SaveTaskPool_Handler,
		},
		{
			MethodName: "FindTaskPoolByTaskType",
			Handler:    _User_FindTaskPoolByTaskType_Handler,
		},
		{
			MethodName: "DelTaskPoolById",
			Handler:    _User_DelTaskPoolById_Handler,
		},
		{
			MethodName: "SaveDict",
			Handler:    _User_SaveDict_Handler,
		},
		{
			MethodName: "FindDictByName",
			Handler:    _User_FindDictByName_Handler,
		},
		{
			MethodName: "SaveBotPinMsg",
			Handler:    _User_SaveBotPinMsg_Handler,
		},
		{
			MethodName: "DelBotPinMsg",
			Handler:    _User_DelBotPinMsg_Handler,
		},
		{
			MethodName: "FindBotPinMsg",
			Handler:    _User_FindBotPinMsg_Handler,
		},
		{
			MethodName: "SaveBotCommand",
			Handler:    _User_SaveBotCommand_Handler,
		},
		{
			MethodName: "FindBotCommand",
			Handler:    _User_FindBotCommand_Handler,
		},
		{
			MethodName: "DelBotCommand",
			Handler:    _User_DelBotCommand_Handler,
		},
		{
			MethodName: "FindOneBotCommand",
			Handler:    _User_FindOneBotCommand_Handler,
		},
		{
			MethodName: "SaveAssetFile",
			Handler:    _User_SaveAssetFile_Handler,
		},
		{
			MethodName: "UpdateAssetFile",
			Handler:    _User_UpdateAssetFile_Handler,
		},
		{
			MethodName: "DelAssetFile",
			Handler:    _User_DelAssetFile_Handler,
		},
		{
			MethodName: "FindAssetFile",
			Handler:    _User_FindAssetFile_Handler,
		},
		{
			MethodName: "FindOneAssetFile",
			Handler:    _User_FindOneAssetFile_Handler,
		},
		{
			MethodName: "SaveUserTitanToken",
			Handler:    _User_SaveUserTitanToken_Handler,
		},
		{
			MethodName: "FindOneUserTitanToken",
			Handler:    _User_FindOneUserTitanToken_Handler,
		},
		{
			MethodName: "UpdateUserTitanToken",
			Handler:    _User_UpdateUserTitanToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user.proto",
}
