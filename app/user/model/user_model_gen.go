// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheUserIdPrefix                       = "cache:user:id:"
	cacheUserRecommendCodeDeletedTimePrefix = "cache:user:recommendCode:deletedTime:"
	cacheUserUidDeletedTimePrefix           = "cache:user:uid:deletedTime:"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User, s ...sqlx.Session) (sql.Result, error)
		FindOne(ctx context.Context, id int64, s ...sqlx.Session) (*User, error)
		FindOneByRecommendCodeDeletedTime(ctx context.Context, recommendCode string, deletedTime int64) (*User, error)
		FindOneByUidDeletedTime(ctx context.Context, uid int64, deletedTime int64) (*User, error)
		FindOneByBuilder(ctx context.Context, sbs ...squirrel.SelectBuilder) (*User, error)
		Update(ctx context.Context, data *User, s ...sqlx.Session) error
		ListPage(ctx context.Context, page, size int64, sbs ...squirrel.SelectBuilder) ([]*User, int64, error)
		List(ctx context.Context, sbs ...squirrel.SelectBuilder) ([]*User, error)
		Count(ctx context.Context, cbs ...squirrel.SelectBuilder) (int64, error)
		Delete(ctx context.Context, id int64, s ...sqlx.Session) error
	}

	defaultUserModel struct {
		sqlc.CachedConn
		table string
	}

	User struct {
		Id            int64  `db:"id"`
		Uid           int64  `db:"uid"`
		Name          string `db:"name"`           // 姓名
		Avatar        string `db:"avatar"`         // 头像路径
		RecommendCode string `db:"recommend_code"` // 推荐码
		Source        int64  `db:"source"`         // 用户来源 1邀请2分享
		Mail          string `db:"mail"`           // 邮箱
		WalletAddress string `db:"wallet_address"` // 钱包地址
		Distribution  int64 `db:"distribution"`   // 项目代币分配权
		Pid           int64  `db:"pid"`            // 子账户所属父账户ID
		IsReceive     int64  `db:"is_receive"`     // 是否领取奖励 0未领取 1已领取
		Puid          int64  `db:"puid"`           // uid所属父uid
		LanguageCode  string `db:"language_code"`  // 语言代码
		IsDisable     int64  `db:"is_disable"`     // 是否禁用 1禁用 2启用
		IsRead        int64  `db:"is_read"`        // 是否阅读提示 0未阅读 1已阅读
		CreatedTime   int64  `db:"created_time"`
		UpdatedTime   int64  `db:"updated_time"`
		DeletedTime   int64  `db:"deleted_time"`
	}
)

func newUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64, s ...sqlx.Session) error {
	data, err := m.FindOne(ctx, id, s...)
	if err != nil {
		return err
	}

	userIdKey := fmt.Sprintf("%s%v", cacheUserIdPrefix, id)
	userRecommendCodeDeletedTimeKey := fmt.Sprintf("%s%v:%v", cacheUserRecommendCodeDeletedTimePrefix, data.RecommendCode, data.DeletedTime)
	userUidDeletedTimeKey := fmt.Sprintf("%s%v:%v", cacheUserUidDeletedTimePrefix, data.Uid, data.DeletedTime)

	var query string
	if UserSoftDelete {
		query = fmt.Sprintf("update %s set `deleted_time` = %v where `id` = ?", m.table, time.Now().Unix())
	} else {
		query = fmt.Sprintf("delete from %s where `id` = ?", m.table)
	}

	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if s != nil {
			return s[0].ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, userIdKey, userRecommendCodeDeletedTimeKey, userUidDeletedTimeKey)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64, s ...sqlx.Session) (*User, error) {
	userIdKey := fmt.Sprintf("%s%v", cacheUserIdPrefix, id)
	var resp User
	err := m.QueryRowCtx(ctx, &resp, userIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
		if s != nil {
			return s[0].QueryRowCtx(ctx, v, query, id)
		}
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByRecommendCodeDeletedTime(ctx context.Context, recommendCode string, deletedTime int64) (*User, error) {
	userRecommendCodeDeletedTimeKey := fmt.Sprintf("%s%v:%v", cacheUserRecommendCodeDeletedTimePrefix, recommendCode, deletedTime)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, userRecommendCodeDeletedTimeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `recommend_code` = ? and `deleted_time` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, recommendCode, deletedTime); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByUidDeletedTime(ctx context.Context, uid int64, deletedTime int64) (*User, error) {
	userUidDeletedTimeKey := fmt.Sprintf("%s%v:%v", cacheUserUidDeletedTimePrefix, uid, deletedTime)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, userUidDeletedTimeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `uid` = ? and `deleted_time` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uid, deletedTime); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User, s ...sqlx.Session) (sql.Result, error) {
	userIdKey := fmt.Sprintf("%s%v", cacheUserIdPrefix, data.Id)
	userRecommendCodeDeletedTimeKey := fmt.Sprintf("%s%v:%v", cacheUserRecommendCodeDeletedTimePrefix, data.RecommendCode, data.DeletedTime)
	userUidDeletedTimeKey := fmt.Sprintf("%s%v:%v", cacheUserUidDeletedTimePrefix, data.Uid, data.DeletedTime)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
		if s != nil {
			return s[0].ExecCtx(ctx, query, data.Uid, data.Name, data.Avatar, data.RecommendCode, data.Source, data.Mail, data.WalletAddress, data.Distribution, data.Pid, data.IsReceive, data.Puid, data.LanguageCode, data.IsDisable, data.IsRead, data.CreatedTime, data.UpdatedTime, data.DeletedTime)
		}
		return conn.ExecCtx(ctx, query, data.Uid, data.Name, data.Avatar, data.RecommendCode, data.Source, data.Mail, data.WalletAddress, data.Distribution, data.Pid, data.IsReceive, data.Puid, data.LanguageCode, data.IsDisable, data.IsRead, data.CreatedTime, data.UpdatedTime, data.DeletedTime)
	}, userIdKey, userRecommendCodeDeletedTimeKey, userUidDeletedTimeKey)
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User, s ...sqlx.Session) error {
	data, err := m.FindOne(ctx, newData.Id, s...)
	if err != nil {
		return err
	}

	userIdKey := fmt.Sprintf("%s%v", cacheUserIdPrefix, data.Id)
	userRecommendCodeDeletedTimeKey := fmt.Sprintf("%s%v:%v", cacheUserRecommendCodeDeletedTimePrefix, data.RecommendCode, data.DeletedTime)
	userUidDeletedTimeKey := fmt.Sprintf("%s%v:%v", cacheUserUidDeletedTimePrefix, data.Uid, data.DeletedTime)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
		if s != nil {
			return s[0].ExecCtx(ctx, query, newData.Uid, newData.Name, newData.Avatar, newData.RecommendCode, newData.Source, newData.Mail, newData.WalletAddress, newData.Distribution, newData.Pid, newData.IsReceive, newData.Puid, newData.LanguageCode, newData.IsDisable, newData.IsRead, newData.CreatedTime, newData.UpdatedTime, newData.DeletedTime, newData.Id)
		}
		return conn.ExecCtx(ctx, query, newData.Uid, newData.Name, newData.Avatar, newData.RecommendCode, newData.Source, newData.Mail, newData.WalletAddress, newData.Distribution, newData.Pid, newData.IsReceive, newData.Puid, newData.LanguageCode, newData.IsDisable, newData.IsRead, newData.CreatedTime, newData.UpdatedTime, newData.DeletedTime, newData.Id)
	}, userIdKey, userRecommendCodeDeletedTimeKey, userUidDeletedTimeKey)
	return err
}

func (m *defaultUserModel) FindOneByBuilder(ctx context.Context, sbs ...squirrel.SelectBuilder) (*User, error) {
	var sb squirrel.SelectBuilder
	if sbs == nil {
		sb = squirrel.Select()
	} else {
		sb = sbs[0]
	}

	// query rows
	query, args, err := sb.From(m.table).Columns(userRows).Limit(1).ToSql()
	if err != nil {
		return nil, err
	}
	var ret User
	if err := m.QueryRowNoCacheCtx(ctx, &ret, query, args...); err != nil {
		return nil, err
	}

	return &ret, nil
}

func (m *defaultUserModel) ListPage(ctx context.Context, page, size int64, sbs ...squirrel.SelectBuilder) ([]*User, int64, error) {
	var sb squirrel.SelectBuilder
	if sbs == nil {
		sb = squirrel.Select()
	} else {
		sb = sbs[0]
	}

	// count builder
	cb := sb.Column("Count(*) as count").From(m.table)
	query, args, err := cb.ToSql()
	if err != nil {
		return nil, 0, err
	}

	var total int64
	if err := m.QueryRowNoCacheCtx(ctx, &total, query, args...); err != nil {
		return nil, 0, err
	}

	// query rows
	if page <= 0 {
		page = 1
	}
	query, args, err = sb.From(m.table).Columns(userRows).Offset(uint64((page - 1) * size)).Limit(uint64(size)).ToSql()
	if err != nil {
		return nil, 0, err
	}
	var list []*User
	if err := m.QueryRowsNoCacheCtx(ctx, &list, query, args...); err != nil {
		return nil, 0, err
	}

	return list, total, nil
}

func (m *defaultUserModel) List(ctx context.Context, sbs ...squirrel.SelectBuilder) ([]*User, error) {
	var sb squirrel.SelectBuilder
	if sbs == nil {
		sb = squirrel.Select()
	} else {
		sb = sbs[0]
	}

	// query rows
	query, args, err := sb.From(m.table).Columns(userRows).ToSql()
	if err != nil {
		return nil, err
	}
	var list []*User
	if err := m.QueryRowsNoCacheCtx(ctx, &list, query, args...); err != nil {
		return nil, err
	}

	return list, nil
}

func (m *defaultUserModel) Count(ctx context.Context, cbs ...squirrel.SelectBuilder) (int64, error) {
	var cb squirrel.SelectBuilder
	if cbs == nil {
		cb = squirrel.Select()
	} else {
		cb = cbs[0]
	}

	// count builder
	query, args, err := cb.Column("Count(*) as count").From(m.table).ToSql()
	if err != nil {
		return 0, err
	}

	var total int64
	if err := m.QueryRowNoCacheCtx(ctx, &total, query, args...); err != nil {
		return 0, err
	}

	return total, err
}

func (m *defaultUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserModel) tableName() string {
	return m.table
}

var UserSoftDelete bool

func init() {
	tp := reflect.TypeOf(User{})
	for i := 0; i < tp.NumField(); i++ {
		if tp.Field(i).Tag.Get("db") == "deleted_time" {
			UserSoftDelete = true
			return
		}
	}
}
