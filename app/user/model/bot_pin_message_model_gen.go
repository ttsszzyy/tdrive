// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	botPinMessageFieldNames          = builder.RawFieldNames(&BotPinMessage{})
	botPinMessageRows                = strings.Join(botPinMessageFieldNames, ",")
	botPinMessageRowsExpectAutoSet   = strings.Join(stringx.Remove(botPinMessageFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	botPinMessageRowsWithPlaceHolder = strings.Join(stringx.Remove(botPinMessageFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheBotPinMessageIdPrefix = "cache:botPinMessage:id:"
)

type (
	botPinMessageModel interface {
		Insert(ctx context.Context, data *BotPinMessage, s ...sqlx.Session) (sql.Result, error)
		FindOne(ctx context.Context, id int64, s ...sqlx.Session) (*BotPinMessage, error)
		FindOneByBuilder(ctx context.Context, sbs ...squirrel.SelectBuilder) (*BotPinMessage, error)
		Update(ctx context.Context, data *BotPinMessage, s ...sqlx.Session) error
		ListPage(ctx context.Context, page, size int64, sbs ...squirrel.SelectBuilder) ([]*BotPinMessage, int64, error)
		List(ctx context.Context, sbs ...squirrel.SelectBuilder) ([]*BotPinMessage, error)
		Count(ctx context.Context, cbs ...squirrel.SelectBuilder) (int64, error)
		Delete(ctx context.Context, id int64, s ...sqlx.Session) error
	}

	defaultBotPinMessageModel struct {
		sqlc.CachedConn
		table string
	}

	BotPinMessage struct {
		Id          int64  `db:"id"`
		ChatId      int64  `db:"chat_id"` // 目标用户或者频道名称@
		Message     int64  `db:"message"` // 消息id
		Text        string `db:"text"`    // 消息
		CreatedTime int64  `db:"created_time"`
		UpdatedTime int64  `db:"updated_time"`
		DeletedTime int64  `db:"deleted_time"`
	}
)

func newBotPinMessageModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBotPinMessageModel {
	return &defaultBotPinMessageModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`bot_pin_message`",
	}
}

func (m *defaultBotPinMessageModel) Delete(ctx context.Context, id int64, s ...sqlx.Session) error {
	botPinMessageIdKey := fmt.Sprintf("%s%v", cacheBotPinMessageIdPrefix, id)

	var query string
	if BotPinMessageSoftDelete {
		query = fmt.Sprintf("update %s set `deleted_time` = %v where `id` = ?", m.table, time.Now().Unix())
	} else {
		query = fmt.Sprintf("delete from %s where `id` = ?", m.table)
	}

	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if s != nil {
			return s[0].ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, botPinMessageIdKey)
	return err
}

func (m *defaultBotPinMessageModel) FindOne(ctx context.Context, id int64, s ...sqlx.Session) (*BotPinMessage, error) {
	botPinMessageIdKey := fmt.Sprintf("%s%v", cacheBotPinMessageIdPrefix, id)
	var resp BotPinMessage
	err := m.QueryRowCtx(ctx, &resp, botPinMessageIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", botPinMessageRows, m.table)
		if s != nil {
			return s[0].QueryRowCtx(ctx, v, query, id)
		}
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBotPinMessageModel) Insert(ctx context.Context, data *BotPinMessage, s ...sqlx.Session) (sql.Result, error) {
	botPinMessageIdKey := fmt.Sprintf("%s%v", cacheBotPinMessageIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, botPinMessageRowsExpectAutoSet)
		if s != nil {
			return s[0].ExecCtx(ctx, query, data.ChatId, data.Message, data.Text, data.CreatedTime, data.UpdatedTime, data.DeletedTime)
		}
		return conn.ExecCtx(ctx, query, data.ChatId, data.Message, data.Text, data.CreatedTime, data.UpdatedTime, data.DeletedTime)
	}, botPinMessageIdKey)
}

func (m *defaultBotPinMessageModel) Update(ctx context.Context, data *BotPinMessage, s ...sqlx.Session) error {
	botPinMessageIdKey := fmt.Sprintf("%s%v", cacheBotPinMessageIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, botPinMessageRowsWithPlaceHolder)
		if s != nil {
			return s[0].ExecCtx(ctx, query, data.ChatId, data.Message, data.Text, data.CreatedTime, data.UpdatedTime, data.DeletedTime, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.ChatId, data.Message, data.Text, data.CreatedTime, data.UpdatedTime, data.DeletedTime, data.Id)
	}, botPinMessageIdKey)
	return err
}

func (m *defaultBotPinMessageModel) FindOneByBuilder(ctx context.Context, sbs ...squirrel.SelectBuilder) (*BotPinMessage, error) {
	var sb squirrel.SelectBuilder
	if sbs == nil {
		sb = squirrel.Select()
	} else {
		sb = sbs[0]
	}

	// query rows
	query, args, err := sb.From(m.table).Columns(botPinMessageRows).Limit(1).ToSql()
	if err != nil {
		return nil, err
	}
	var ret BotPinMessage
	if err := m.QueryRowNoCacheCtx(ctx, &ret, query, args...); err != nil {
		return nil, err
	}

	return &ret, nil
}

func (m *defaultBotPinMessageModel) ListPage(ctx context.Context, page, size int64, sbs ...squirrel.SelectBuilder) ([]*BotPinMessage, int64, error) {
	var sb squirrel.SelectBuilder
	if sbs == nil {
		sb = squirrel.Select()
	} else {
		sb = sbs[0]
	}

	// count builder
	cb := sb.Column("Count(*) as count").From(m.table)
	query, args, err := cb.ToSql()
	if err != nil {
		return nil, 0, err
	}

	var total int64
	if err := m.QueryRowNoCacheCtx(ctx, &total, query, args...); err != nil {
		return nil, 0, err
	}

	// query rows
	if page <= 0 {
		page = 1
	}
	query, args, err = sb.From(m.table).Columns(botPinMessageRows).Offset(uint64((page - 1) * size)).Limit(uint64(size)).ToSql()
	if err != nil {
		return nil, 0, err
	}
	var list []*BotPinMessage
	if err := m.QueryRowsNoCacheCtx(ctx, &list, query, args...); err != nil {
		return nil, 0, err
	}

	return list, total, nil
}

func (m *defaultBotPinMessageModel) List(ctx context.Context, sbs ...squirrel.SelectBuilder) ([]*BotPinMessage, error) {
	var sb squirrel.SelectBuilder
	if sbs == nil {
		sb = squirrel.Select()
	} else {
		sb = sbs[0]
	}

	// query rows
	query, args, err := sb.From(m.table).Columns(botPinMessageRows).ToSql()
	if err != nil {
		return nil, err
	}
	var list []*BotPinMessage
	if err := m.QueryRowsNoCacheCtx(ctx, &list, query, args...); err != nil {
		return nil, err
	}

	return list, nil
}

func (m *defaultBotPinMessageModel) Count(ctx context.Context, cbs ...squirrel.SelectBuilder) (int64, error) {
	var cb squirrel.SelectBuilder
	if cbs == nil {
		cb = squirrel.Select()
	} else {
		cb = cbs[0]
	}

	// count builder
	query, args, err := cb.Column("Count(*) as count").From(m.table).ToSql()
	if err != nil {
		return 0, err
	}

	var total int64
	if err := m.QueryRowNoCacheCtx(ctx, &total, query, args...); err != nil {
		return 0, err
	}

	return total, err
}

func (m *defaultBotPinMessageModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBotPinMessageIdPrefix, primary)
}

func (m *defaultBotPinMessageModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", botPinMessageRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBotPinMessageModel) tableName() string {
	return m.table
}

var BotPinMessageSoftDelete bool

func init() {
	tp := reflect.TypeOf(BotPinMessage{})
	for i := 0; i < tp.NumField(); i++ {
		if tp.Field(i).Tag.Get("db") == "deleted_time" {
			BotPinMessageSoftDelete = true
			return
		}
	}
}
